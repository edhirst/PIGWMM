'''Script of functions to compute invariants, and model parameters of the Permutation-Invariant Models'''
#Import libraries
import numpy as np
from scipy.optimize import fsolve

#Define functions to compute experimental invariants of an input square matrix
def invariants_experimental_LQ(matrix):
    '''
    Computes all Gaussian invariants (linear and quadratic, up to 2nd order) of a single square matrix.

    Parameters
    ----------
    matrix : ndarray
        Input square matrix of shape (n, n)

    Returns
    -------
    invariants : ndarray
        A 1D array of the selected Gaussian invariants computed for the input matrix.
    '''
    # Compute common terms
    diag = np.diagonal(matrix)
    tr = np.trace(matrix)
    total_sum = np.sum(matrix)
    matrix_T = matrix.T

    # Linear terms
    invariants = [
        tr,                                 # sum_i M_ii
        total_sum,                          # sum_{i,j} M_ij
    ]

    # Quadratic terms
    invariants += [
        np.sum(matrix ** 2),                # sum_{i,j} M_ij^2
        np.sum(matrix * matrix_T),          # sum_{i,j} M_ij * M_ji
        np.sum(diag[:, None] * matrix),     # sum_{i,j} M_ii * M_ij
        np.sum(diag[None, :] * matrix),     # sum_{i,j} M_ii * M_ji
        np.sum(matrix_T @ matrix),          # sum_{i,j,k} M_ij * M_ik
        np.sum(matrix @ matrix_T),          # sum_{i,j,k} M_ij * M_kj
        np.sum(matrix @ matrix),            # sum_{i,j,k} M_ij * M_jk (same as above if symmetric)
        np.sum(matrix) ** 2,                # sum_{i,j,k,l} M_ij * M_kl = (sum M_ij)^2
        np.sum(diag ** 2),                  # sum_i M_ii^2
        tr ** 2,                            # sum_{i,j} M_ii * M_jj = (sum M_ii)^2
        tr * total_sum                      # sum_{i,j,k} M_ii * M_jk
    ]

    return np.array(invariants)


def invariants_experimental_CQ(matrix):
    '''
    Computes low and high order node Gaussian invariants (node orders {1,2,order-1,order},
    for cubic and quartic orders 3 and 4) of a single square matrix.

    Parameters
    ----------
    matrix : ndarray
        Input square matrix of shape (n, n)

    Returns
    -------
    invariants : ndarray
        A 1D array of the selected Gaussian invariants computed for the input matrix.
    '''
    # Compute common terms
    diag = np.diagonal(matrix)
    tr = np.trace(matrix)
    sum_all = np.sum(matrix)
    matrix_T = matrix.T

    matrix_sq = matrix**2
    matrix_T_sq = matrix_T**2
    diag_sq = diag**2
    diag_cu = diag**3
    diag_four = diag**4

    invariants = []

    # Cubic: 1-node
    invariants.append(np.sum(diag_cu))                  # \sum_{i} M_{ii}^3 

    # Cubic: 2-node
    invariants += [
        np.sum(diag_sq) * tr,                           # \sum_{i,j} M_{ii}^2 M_{jj}
        np.sum(diag[:, None] * matrix * diag[None, :]), # \sum_{i,j} M_{ii} M_{ij} M_{jj}
        np.sum(diag_sq[:, None] * matrix),              # \sum_{i,j} M_{ii}^2 M_{ij}
        np.sum(matrix_T * diag_sq[:, None]),            # \sum_{i,j} M_{ji} M_{ii}^2 
        np.sum(diag[:, None] * matrix_sq),              # \sum_{i,j} M_{ii} M_{ij}^2
        np.sum(matrix_T * diag[:, None] * matrix),      # \sum_{i,j} M_{ji} M_{ii} M_{ij}
        np.sum(matrix_T_sq * diag[:, None]),            # \sum_{i,j} M_{ji}^2 M_{ii}
        np.sum(matrix**3),                              # \sum_{i,j} M_{ij}^3  
        np.sum(matrix_sq * matrix_T),                   # \sum_{i,j} M_{ij}^2 M_{ji}
    ]

    # Cubic: 5-node
    invariants += [
        tr * sum_all**2,                                # \sum_{i,j,k,l,m} M_{ii} M_{jk} M_{lm} 
        np.sum(matrix @ matrix) * sum_all,              # \sum_{i,j,k,l,m} M_{ij} M_{jk} M_{lm} 
        np.sum(matrix @ matrix_T) * sum_all,            # \sum_{i,j,k,l,m} M_{ij} M_{kj} M_{lm} 
        np.sum(matrix_T @ matrix) * sum_all,            # \sum_{i,j,k,l,m} M_{ji} M_{jk} M_{lm} 
    ]   

    # Cubic: 6-node
    invariants.append(sum_all**3)                       # \sum_{i,j,k,l,m,n} M_{ij} M_{kl} M_{mn}

    # Quartic: 1-node
    invariants.append(np.sum(diag_four))                            # \sum_{i} M_{ii}^4 

    # Quartic: 2-node
    invariants += [
        np.sum(diag_cu) * tr,                                       # \sum_{i,j} M_{ii}^3 M_{jj}
        np.sum(diag_sq)**2,                                         # \sum_{i,j} M_{ii}^2 M_{jj}^2
        np.sum(diag_cu[:, None] * matrix),                          # \sum_{i,j} M_{ii}^3 M_{ij}
        np.sum(matrix_T * diag_cu[:, None]),                        # \sum_{i,j} M_{ji} M_{ii}^3
        np.sum(diag_sq[:, None] * matrix * diag[None, :]),          # \sum_{i,j} M_{ii}^2 M_{ij} M_{jj}
        np.sum(matrix_T * diag_sq[:, None] * diag[None, :]),        # \sum_{i,j} M_{jj} M_{ji} M_{ii}^2
        np.sum(diag_sq[:, None] * matrix_sq),                       # \sum_{i,j} M_{ii}^2 M_{ij}^2
        np.sum(matrix_T * diag_sq[:, None] * matrix),               # \sum_{i,j} M_{ji} M_{ii}^2 M_{ij}
        np.sum(matrix_T_sq * diag_sq[:, None]),                     # \sum_{i,j} M_{ji}^2 M_{ii}^2
        np.sum(diag[:, None] * matrix_sq * diag[None, :]),          # \sum_{i,j} M_{ii} M_{ij}^2 M_{jj}
        np.sum(matrix_T * diag[:, None] * matrix * diag[None, :]),  # \sum_{i,j} M_{ji} M_{ii} M_{ij} M_{jj}
        np.sum(diag[:, None] * matrix**3),                          # \sum_{i,j} M_{ii} M_{ij}^3
        np.sum(matrix_T * diag[:, None] * matrix_sq),               # \sum_{i,j} M_{ji} M_{ii} M_{ij}^2
        np.sum(matrix_T_sq * diag[:, None] * matrix),               # \sum_{i,j} M_{ji}^2 M_{ii} M_{ij}
        np.sum(matrix_T**3 * diag[:, None]),                        # \sum_{i,j} M_{ji}^3 M_{ii}
        np.sum(matrix**4),                                          # \sum_{i,j} M_{ij}^4  
        np.sum(matrix_T * matrix**3),                               # \sum_{i,j} M_{ji} M_{ij}^3
        np.sum(matrix_T_sq * matrix_sq),                            # \sum_{i,j} M_{ji}^2 M_{ij}^2
    ]

    # Quartic: 7-node
    invariants += [
        tr * sum_all**3,                                            # \sum_{i,j,k,l,m,n,o} M_{ii} M_{jk} M_{lm} M_{no} 
        np.sum(matrix @ matrix) * sum_all**2,                       # \sum_{i,j,k,l,m,n,o} M_{ij} M_{jk} M_{lm} M_{no} 
        np.sum(matrix @ matrix_T) * sum_all**2,                     # \sum_{i,j,k,l,m,n,o} M_{ij} M_{kj} M_{lm} M_{no} 
        np.sum(matrix_T @ matrix) * sum_all**2,                     # \sum_{i,j,k,l,m,n,o} M_{ji} M_{jk} M_{lm} M_{no} 
    ]

    # Quartic: 8-node
    invariants.append(sum_all**4)                                   # \sum_{i,j,k,l,m,n} M_{ij} M_{kl} M_{mn} M_{op}

    return np.array(invariants)


#Define function to compute Gaussian model parameters
def model_params(invariants_input, D=10):
    '''
    Computes the Gaussian model parameters from the experimental linear and quadratic invariants.

    Parameters
    ----------
    invariants_input : list
        The list of linear and quadratic invariants.
    D : int, optional
        The dimension of the matrices being analysed. The default is 10.

    Returns
    -------
    list
        The Gaussian model parameters.
    '''
    invariants = invariants_input[:13] #...only use the linear and quadratic invariants to compute the model parameters
    
    #Define function whose root gives the model parameters
    def f(y):
        # <sum_{i} M_{ii}>
        f1 = y[0] + (np.sqrt(D-1))*y[1] - float(invariants[0])
        # <sum_{i,j} M_{ij}>
        f2 = D*y[0] - float(invariants[1])
        # <sum_{i,j} M_ij M_ij>
        f3 = y[0]**2 + y[1]**2 + y[2] + y[4] + (D-1)*y[8] + (D-1)*y[10] + (D-1)*y[5] + ((D*(D-3))/2)*y[11] + (((D-1)*(D-2))/2)*y[12] - float(invariants[2])                 
        # <sum_{i,j} M_ij M_ji>
        f4 = ((D*(D-3))/2)*y[11] - (((D-1)*(D-2))/2)*y[12] + 2*(D-1)*y[6] + (D-1)*y[10] + y[2] + y[4] + y[0]**2 + y[1]**2 - float(invariants[3])
        # <sum_{i,j} M_ii M_ij>                                 
        f5 = y[2] + np.sqrt(D-1)*y[3] + (D-1)*y[6] + (D-1)*y[8] + (D-1)*(np.sqrt(D-2))*y[9] + y[0]**2 + y[0]*y[1]*(np.sqrt(D-1)) - float(invariants[4])                
        # <sum_{i,j} M_ii M_ji>
        f6 = y[2] + np.sqrt(D-1)*y[3] + (D-1)*y[6] + (D-1)*y[5] + (D-1)*(np.sqrt(D-2))*y[7] + y[0]**2 + y[0]*y[1]*(np.sqrt(D-1)) - float(invariants[5])                
        # <sum_{i,j,k} M_ij M_ik>
        f7 = D*y[2] + D*(D-1)*y[8] + D*(y[0]**2) - float(invariants[6])    
        # <sum_{i,j,k} M_ij M_kj>
        f8 = D*y[2] + D*(D-1)*y[5] + D*(y[0]**2) - float(invariants[7])    
        # <sum_{i,j,k} M_ij M_jk>
        f9 = D*y[2] + D*(D-1)*y[6] + D*(y[0]**2) - float(invariants[8])    
        # <sum_{i,j,k,l} M_ij M_kl>
        f10 = (D**2)*y[2] + (D**2)*(y[0]**2) - float(invariants[9])        
        # <sum_{i} M_ii M_ii OR (M_ii)^2>
        f11 = (D**-1)*y[2] + ((D-1)/D)*y[4] + 2*((np.sqrt(D-1))/D)*y[3] + ((D-1)/D)*y[5] + ((D-1)/D)*y[8] + ((D-1)/D)*(D-2)*y[10] + 2*((D-1)/D)*y[6] + 2*((D-1)/D)*(np.sqrt(D-2))*y[7] + 2*((D-1)/D)*(np.sqrt(D-2))*y[9] + ((y[0]**2)/D) + 2*((np.sqrt(D-1))/D)*y[0]*y[1] + ((D-1)/D)*(y[1]**2) - float(invariants[10]) 
        # <sum_{i,j} M_ii M_jj>
        f12 = y[2] + (D-1)*y[4] + 2*(np.sqrt(D-1))*y[3] + y[0]**2 + 2*(np.sqrt(D-1))*y[0]*y[1] + (D-1)*(y[1]**2) - float(invariants[11])                        
        # <sum_{i,j,k} M_{ii} M_{jk}>
        f13 = D*y[2] + D*(np.sqrt(D-1))*y[3] + D*(y[0]**2) + D*(np.sqrt(D-1))*y[0]*y[1] - float(invariants[12])             
    
        return [f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13]
        
    params = fsolve(f, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    #print(x,'\n',np.isclose(f(x), [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) #...check solver performance
    
    return params


#Define function to compute the predicted theoretical values of the higher-order invariants from the fitted PIGM-model
def invariants_theoretical_CQ(model_params, D=10):
    '''
    Computes the theoretical invariant values from the model parameters, all low-node (1&2) and high-node (n-1,n) invariants for orders n = 3 (cubic) and 4 (quartic).

    Parameters
    ----------
    model_params : list
        The Gaussian model parameters.
    D : int, optional
        The dimension of the matrices being analysed. The default is 10.

    Returns
    -------
    list
        The theoretical invariant values.
    '''
    x = model_params
    
    # Cubic terms:
    # 1-node
    C1_1 = (3*(D - 1)*x[0]*x[1]**2 + x[0]**3 + 6*(D - 1)*x[3]*x[1] + 6*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[0] + 3*((D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + x[2])*x[0] + ((D - 1)*x[1]**3 + 6*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[1] + 6*x[3]*x[0] + 3*((D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + x[0]**2 + x[2])*x[1])*np.sqrt(D - 1))/D**2
    # 2-node
    C2_1 = ((D**2 - 2*D + 1)*x[1]**3 + 6*(D - 1)*x[3]*x[0] + 2*((D**2 - 2*D + 1)*x[7] + (D**2 - 2*D + 1)*x[9])*np.sqrt(D - 2)*x[1] + (3*(D - 1)*x[0]**2 + 3*(D - 1)*x[2] + 3*(D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8] + (D**3 - 4*D**2 + 5*D - 2)*x[10])*x[1] + (3*(D - 1)*x[0]*x[1]**2 + x[0]**3 + 6*(D - 1)*x[3]*x[1] + 2*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[0] + (3*(D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*np.sqrt(D - 1))/(np.sqrt(D - 1)*D)
    C2_2 = ((D - 1)*x[0]*x[1]**2 + x[0]**3 + 2*(D - 1)*x[3]*x[1] + ((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[0] + ((D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + 3*x[2])*x[0] + (((D + 1)*x[7] + (D + 1)*x[9])*np.sqrt(D - 2)*x[1] + 4*x[3]*x[0] + (D*x[5] + 2*D*x[6] + D*x[8] + (D - 2)*x[10] + 2*x[0]**2 + 2*x[2])*x[1])*np.sqrt(D - 1))/D
    C2_3 = (2*((D**2 - 3*D + 2)*x[7] + 2*(D**2 - 3*D + 2)*x[9])*x[0] + 2*((D**2 - 3*D + 2)*x[9]*x[1] + (2*x[3]*x[0] + ((D - 1)*x[6] + (D - 1)*x[8] + x[0]**2 + x[2])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + ((D - 1)*x[0]*x[1]**2 + x[0]**3 + 2*(D - 1)*x[3]*x[1] + ((D - 1)*x[4] + (D - 1)*x[5] + 4*(D - 1)*x[6] + 3*(D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D)
    C2_4 = (2*(2*(D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[0] + 2*((D**2 - 3*D + 2)*x[7]*x[1] + (2*x[3]*x[0] + ((D - 1)*x[5] + (D - 1)*x[6] + x[0]**2 + x[2])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + ((D - 1)*x[0]*x[1]**2 + x[0]**3 + 2*(D - 1)*x[3]*x[1] + ((D - 1)*x[4] + 3*(D - 1)*x[5] + 4*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D)
    C2_5 = 1/2*(4*(D**2 - 3*D + 2)*x[9]*x[0] + (4*(2*(D - 2)*x[7] + (D - 2)*x[9])*x[1] + (2*x[1]**3 + 4*x[3]*x[0] + (2*(D + 1)*x[5] + 2*(D - 1)*x[8] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 2*x[0]**2 + 2*x[2] + 6*x[4] + 4*x[6])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*x[0]**3 + 2*x[0]*x[1]**2 + (2*(D - 1)*x[5] + 4*(D - 1)*x[6] + 6*(D - 1)*x[8] + 2*(D - 1)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 6*x[2] + 2*x[4])*x[0] + 4*x[3]*x[1])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D)
    C2_6 = 1/2*(2*x[0]**3 + 2*x[0]*x[1]**2 + 2*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[0] + (2*(D - 1)*x[5] + 8*(D - 1)*x[6] + 2*(D - 1)*x[8] + 2*(D - 1)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 6*x[2] + 2*x[4])*x[0] + 4*x[3]*x[1] + (2*x[1]**3 + 6*np.sqrt(D - 2)*(x[7] + x[9])*x[1] + 4*x[3]*x[0] + (4*D*x[6] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 2*x[0]**2 + 2*x[2] + 6*x[4] + 2*x[5] + 2*x[8])*x[1])*np.sqrt(D - 1))/D
    C2_7 = 1/2*(4*(D**2 - 3*D + 2)*x[7]*x[0] + (4*((D - 2)*x[7] + 2*(D - 2)*x[9])*x[1] + (2*x[1]**3 + 4*x[3]*x[0] + (2*(D - 1)*x[5] + 2*(D + 1)*x[8] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 2*x[0]**2 + 2*x[2] + 6*x[4] + 4*x[6])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*x[0]**3 + 2*x[0]*x[1]**2 + (6*(D - 1)*x[5] + 4*(D - 1)*x[6] + 2*(D - 1)*x[8] + 2*(D - 1)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 6*x[2] + 2*x[4])*x[0] + 4*x[3]*x[1])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D)
    C2_8 = 1/2*(2*(D - 1)*x[0]**3 + 6*(D - 1)*x[0]*x[1]**2 + 12*(D - 1)*x[3]*x[1] + 3*(2*(D - 1)*x[2] + 2*(D - 1)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0] + (2*(D - 2)*x[1]**3 + 12*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[1] + 3*(2*(D - 2)*x[4] + 4*(D - 1)*x[6] + 2*(D**2 - 4*D + 3)*x[10] - (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12])*x[1])*np.sqrt(D - 1))/(D**2 - D)
    C2_9 = 1/2*(2*(D - 1)*x[0]**3 + 6*(D - 1)*x[0]*x[1]**2 + 12*(D - 1)*x[3]*x[1] + (6*(D - 1)*x[2] + 6*(D - 1)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 8*(D**2 - 2*D + 1)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 6*(D**2 - 2*D + 1)*x[10] + 3*(D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0] + (2*(D - 2)*x[1]**3 + 12*((D - 1)*x[7] + (D - 1)*x[9])*np.sqrt(D - 2)*x[1] + (6*(D - 2)*x[4] + 4*(D - 1)*x[5] + 4*(D - 1)*x[6] + 4*(D - 1)*x[8] + 6*(D**2 - 4*D + 3)*x[10] - 3*(D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12])*x[1])*np.sqrt(D - 1))/(D**2 - D)
    # 5-node
    C5_1 = (2*(D**3 - D**2)*x[3]*x[0] + ((D**3 - D**2)*x[0]**2 + (D**3 - D**2)*x[2])*x[1] + (D**2*x[0]**3 + 3*D**2*x[2]*x[0])*np.sqrt(D - 1))/np.sqrt(D - 1)
    C5_2 = D**2*x[0]**3 + (3*D**2*x[2] + (D**3 - D**2)*x[6])*x[0]
    C5_3 = D**2*x[0]**3 + (3*D**2*x[2] + (D**3 - D**2)*x[5])*x[0]
    C5_4 = D**2*x[0]**3 + (3*D**2*x[2] + (D**3 - D**2)*x[8])*x[0]
    # 6-node
    C6_1 = D**3*x[0]**3 + 3*D**3*x[2]*x[0]
    
    # Quartic terms:
    # 1-node
    Q1_1 = ((D**2 - 2*D + 1)*x[1]**4 + x[0]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 3*(D**2 - 2*D + 1)*x[4]**2 + 3*(D**2 - 2*D + 1)*x[5]**2 + 12*(D**2 - 2*D + 1)*x[6]**2 + 12*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 3*(D**2 - 2*D + 1)*x[8]**2 + 24*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 12*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 3*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10]**2 + 6*((D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + x[2])*x[0]**2 + 6*((D - 1)*x[0]**2 + (D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8] + (D**3 - 4*D**2 + 5*D - 2)*x[10])*x[1]**2 + 3*x[2]**2 + 6*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 12*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5])*x[6] + 6*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6])*x[8] + 6*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8])*x[10] + 4*((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + 3*(D - 1)*x[3]*x[5] + 6*(D - 1)*x[3]*x[6] + 3*(D - 1)*x[3]*x[8] + 3*(D**2 - 3*D + 2)*x[3]*x[10] + 3*x[3]*x[0]**2 + 3*x[2]*x[3] + (x[0]**3 + 3*((D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + x[2])*x[0])*x[1] + 6*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 12*((D**2 - 2*D + 1)*x[7]*x[8] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + ((D**2 - 2*D + 1)*x[7] + (D**2 - 2*D + 1)*x[9])*x[1]**2 + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6])*x[7] + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8])*x[9] + ((D**3 - 4*D**2 + 5*D - 2)*x[7] + (D**3 - 4*D**2 + 5*D - 2)*x[9])*x[10])*np.sqrt(D - 2))/D**3
    # 2-node
    Q2_1 = ((D**2 - 2*D + 1)*x[1]**4 + x[0]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 3*(D**2 - 2*D + 1)*x[4]**2 + 3*(2*(D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 2*x[2])*x[0]**2 + 3*(2*(D - 1)*x[0]**2 + 2*(D - 1)*x[2] + 2*(D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8] + (D**3 - 4*D**2 + 5*D - 2)*x[10])*x[1]**2 + 3*x[2]**2 + 3*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 6*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[6] + 3*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[8] + 3*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4])*x[10] + 2*(2*(D - 1)*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[1]**2 + 6*(D - 1)*x[3]*x[4] + 3*(D - 1)*x[3]*x[5] + 6*(D - 1)*x[3]*x[6] + 3*(D - 1)*x[3]*x[8] + 3*(D**2 - 3*D + 2)*x[3]*x[10] + 6*x[3]*x[0]**2 + 6*x[2]*x[3] + (2*x[0]**3 + 3*(2*(D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 2*x[2])*x[0])*x[1] + 6*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 6*(((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + ((D**2 - 2*D + 1)*x[7] + (D**2 - 2*D + 1)*x[9])*x[1]**2 + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[7] + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[9])*np.sqrt(D - 2))/D**2
    Q2_2 = ((D**2 - 2*D + 1)*x[1]**4 + x[0]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 3*(D**2 - 2*D + 1)*x[4]**2 + (D**2 - 1)*x[5]**2 + 4*(D**2 - 1)*x[6]**2 + 4*(D**3 - 2*D**2 - D + 2)*x[7]**2 + (D**2 - 1)*x[8]**2 + 8*(D**3 - 2*D**2 - D + 2)*x[7]*x[9] + 4*(D**3 - 2*D**2 - D + 2)*x[9]**2 + (D**4 - 4*D**3 + 3*D**2 + 4*D - 4)*x[10]**2 + 2*(3*(D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0]**2 + 2*(3*(D - 1)*x[0]**2 + 3*(D - 1)*x[2] + 3*(D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8] + (D**3 - 4*D**2 + 5*D - 2)*x[10])*x[1]**2 + 3*x[2]**2 + 2*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 4*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 1)*x[5])*x[6] + 2*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 1)*x[5] + 2*(D**2 - 1)*x[6])*x[8] + 2*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 2*D**2 - D + 2)*x[5] + 2*(D**3 - 2*D**2 - D + 2)*x[6] + (D**3 - 2*D**2 - D + 2)*x[8])*x[10] + 4*((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + (D - 1)*x[3]*x[5] + 2*(D - 1)*x[3]*x[6] + (D - 1)*x[3]*x[8] + (D**2 - 3*D + 2)*x[3]*x[10] + 3*x[3]*x[0]**2 + 3*x[2]*x[3] + (x[0]**3 + (3*(D - 1)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*x[1] + 2*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 4*((D**2 - 1)*x[7]*x[8] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + ((D**2 - 2*D + 1)*x[7] + (D**2 - 2*D + 1)*x[9])*x[1]**2 + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 1)*x[5] + 2*(D**2 - 1)*x[6])*x[7] + ((D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 1)*x[5] + 2*(D**2 - 1)*x[6] + (D**2 - 1)*x[8])*x[9] + ((D**3 - 2*D**2 - D + 2)*x[7] + (D**3 - 2*D**2 - D + 2)*x[9])*x[10])*np.sqrt(D - 2))/D**2
    Q2_3 = (3*(D**3 - 4*D**2 + 5*D - 2)*x[9]*x[1]**2 + 6*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[8] + 3*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[9]*x[10] + 3*(2*(D**2 - 3*D + 2)*x[7] + 3*(D**2 - 3*D + 2)*x[9])*x[0]**2 + 6*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[6])*x[7] + 3*(3*(D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[8])*x[9] + (6*(D**2 - 3*D + 2)*x[3]*x[7] + 12*(D**2 - 3*D + 2)*x[3]*x[9] + 6*((D**2 - 3*D + 2)*x[7] + 2*(D**2 - 3*D + 2)*x[9])*x[0]*x[1] + ((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + 3*(D - 1)*x[3]*x[5] + 12*(D - 1)*x[3]*x[6] + 9*(D - 1)*x[3]*x[8] + 3*(D**2 - 3*D + 2)*x[3]*x[10] + 9*x[3]*x[0]**2 + 9*x[2]*x[3] + 3*(x[0]**3 + ((D - 1)*x[4] + (D - 1)*x[5] + 4*(D - 1)*x[6] + 3*(D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (x[0]**4 + 12*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[3]**2 + 3*(D - 1)*x[2]*x[4] + 3*(D - 1)*x[2]*x[5] + 6*(D**2 - 2*D + 1)*x[6]**2 + 3*(D**2 - 2*D + 1)*x[8]**2 + 6*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 6*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 3*((D - 1)*x[4] + (D - 1)*x[5] + 3*(D - 1)*x[6] + 2*(D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 2*x[2])*x[0]**2 + 3*((D - 1)*x[0]**2 + (D - 1)*x[2] + (D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8])*x[1]**2 + 3*x[2]**2 + 3*(3*(D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5])*x[6] + 3*(2*(D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 3*(D**2 - 2*D + 1)*x[6])*x[8] + 3*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8])*x[10])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_4 = (3*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[1]**2 + 3*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[8] + 3*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[7]*x[10] + 3*(3*(D**2 - 3*D + 2)*x[7] + 2*(D**2 - 3*D + 2)*x[9])*x[0]**2 + 3*(3*(D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6])*x[7] + 6*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + (D**3 - 4*D**2 + 5*D - 2)*x[6])*x[9] + (12*(D**2 - 3*D + 2)*x[3]*x[7] + 6*(D**2 - 3*D + 2)*x[3]*x[9] + 6*(2*(D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[0]*x[1] + ((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + 9*(D - 1)*x[3]*x[5] + 12*(D - 1)*x[3]*x[6] + 3*(D - 1)*x[3]*x[8] + 3*(D**2 - 3*D + 2)*x[3]*x[10] + 9*x[3]*x[0]**2 + 9*x[2]*x[3] + 3*(x[0]**3 + ((D - 1)*x[4] + 3*(D - 1)*x[5] + 4*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 3*x[2])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (x[0]**4 + 12*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[3]**2 + 3*(D - 1)*x[2]*x[4] + 3*(D**2 - 2*D + 1)*x[5]**2 + 6*(D**2 - 2*D + 1)*x[6]**2 + 6*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 6*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 3*((D - 1)*x[4] + 2*(D - 1)*x[5] + 3*(D - 1)*x[6] + (D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 2*x[2])*x[0]**2 + 3*((D - 1)*x[0]**2 + (D - 1)*x[2] + (D**2 - 2*D + 1)*x[5] + (D**2 - 2*D + 1)*x[6])*x[1]**2 + 3*x[2]**2 + 3*(2*(D - 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 3*(3*(D - 1)*x[2] + (D**2 - 2*D + 1)*x[4] + 3*(D**2 - 2*D + 1)*x[5])*x[6] + 3*((D - 1)*x[2] + (D**2 - 2*D + 1)*x[5] + (D**2 - 2*D + 1)*x[6])*x[8] + 3*((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + (D**3 - 4*D**2 + 5*D - 2)*x[6])*x[10])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_5 = ((D**3 - 7*D + 6)*x[7]*x[8] + (3*(D**2 - 3*D + 2)*x[7] + 4*(D**2 - 3*D + 2)*x[9])*x[0]**2 + ((D**3 - 7*D + 6)*x[7] + 2*(D**3 - 2*D**2 - D + 2)*x[9])*x[1]**2 + (3*(D**2 - 3*D + 2)*x[2] + (D**3 - 7*D + 6)*x[4] + (3*D**3 - 4*D**2 - 9*D + 10)*x[5] + 4*(D**3 - D**2 - 4*D + 4)*x[6])*x[7] + 2*(2*(D**2 - 3*D + 2)*x[2] + (D**3 - 2*D**2 - D + 2)*x[4] + (D**3 - D**2 - 4*D + 4)*x[5] + (D**3 - 7*D + 6)*x[6] + (D**2 - 3*D + 2)*x[8])*x[9] + ((D**4 + 2*D**3 - 27*D**2 + 52*D - 28)*x[7] + 6*(D**3 - 5*D**2 + 8*D - 4)*x[9])*x[10] + (4*(D**2 - 2*D)*x[3]*x[7] + 2*(3*D**2 - 7*D + 2)*x[3]*x[9] + 2*(2*(D**2 - 2*D)*x[7] + (3*D**2 - 7*D + 2)*x[9])*x[0]*x[1] + ((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + (3*D - 1)*x[3]*x[5] + 4*(2*D - 1)*x[3]*x[6] + (5*D - 3)*x[3]*x[8] + (D**2 - D - 2)*x[3]*x[10] + 9*x[3]*x[0]**2 + 9*x[2]*x[3] + (3*x[0]**3 + (3*(D - 1)*x[4] + (3*D - 1)*x[5] + 4*(2*D - 1)*x[6] + (5*D - 3)*x[8] + (D**2 - D - 2)*x[10] + 9*x[2])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (x[0]**4 + 12*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[3]**2 + 3*(D - 1)*x[2]*x[4] + (D**2 - 1)*x[5]**2 + 2*(D**2 - 1)*x[6]**2 + 2*(D**3 - 7*D + 6)*x[7]**2 + 2*(D**3 + 2*D**2 - 13*D + 10)*x[7]*x[9] + 4*(D**2 - 3*D + 2)*x[9]**2 + 2*(D**3 - 5*D**2 + 8*D - 4)*x[10]**2 + (3*(D - 1)*x[4] + 2*(D - 1)*x[5] + 5*(D - 1)*x[6] + 3*(D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 6*x[2])*x[0]**2 + (3*(D - 1)*x[0]**2 + 3*(D - 1)*x[2] + (D**2 - 1)*x[5] + (3*D**2 - 2*D - 1)*x[6] + 2*(D**2 - D)*x[8] + 2*(D**2 - 3*D + 2)*x[10])*x[1]**2 + 3*x[2]**2 + (2*(D - 1)*x[2] + (D**2 - 1)*x[4])*x[5] + (5*(D - 1)*x[2] + (3*D**2 - 2*D - 1)*x[4] + 3*(D**2 - 1)*x[5])*x[6] + (3*(D - 1)*x[2] + 2*(D**2 - D)*x[4] + (D**2 - 1)*x[5] + (D**2 - 1)*x[6])*x[8] + ((D**2 - 3*D + 2)*x[2] + 2*(D**2 - 3*D + 2)*x[4] + (D**3 - 7*D + 6)*x[5] + (D**3 + 2*D**2 - 13*D + 10)*x[6] + 2*(D**2 - 3*D + 2)*x[8])*x[10])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_6 = (2*(D**3 - D**2 - 4*D + 4)*x[7]*x[8] + (4*(D**2 - 3*D + 2)*x[7] + 3*(D**2 - 3*D + 2)*x[9])*x[0]**2 + (2*(D**3 - 2*D**2 - D + 2)*x[7] + (D**3 - 7*D + 6)*x[9])*x[1]**2 + 2*(2*(D**2 - 3*D + 2)*x[2] + (D**3 - 2*D**2 - D + 2)*x[4] + (D**2 - 3*D + 2)*x[5] + (D**3 - 7*D + 6)*x[6])*x[7] + (3*(D**2 - 3*D + 2)*x[2] + (D**3 - 7*D + 6)*x[4] + (D**3 - 7*D + 6)*x[5] + 4*(D**3 - D**2 - 4*D + 4)*x[6] + (3*D**3 - 4*D**2 - 9*D + 10)*x[8])*x[9] + (6*(D**3 - 5*D**2 + 8*D - 4)*x[7] + (D**4 + 2*D**3 - 27*D**2 + 52*D - 28)*x[9])*x[10] + (2*(3*D**2 - 7*D + 2)*x[3]*x[7] + 4*(D**2 - 2*D)*x[3]*x[9] + 2*((3*D**2 - 7*D + 2)*x[7] + 2*(D**2 - 2*D)*x[9])*x[0]*x[1] + ((D - 1)*x[0]*x[1]**3 + 3*(D - 1)*x[3]*x[1]**2 + 3*(D - 1)*x[3]*x[4] + (5*D - 3)*x[3]*x[5] + 4*(2*D - 1)*x[3]*x[6] + (3*D - 1)*x[3]*x[8] + (D**2 - D - 2)*x[3]*x[10] + 9*x[3]*x[0]**2 + 9*x[2]*x[3] + (3*x[0]**3 + (3*(D - 1)*x[4] + (5*D - 3)*x[5] + 4*(2*D - 1)*x[6] + (3*D - 1)*x[8] + (D**2 - D - 2)*x[10] + 9*x[2])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (x[0]**4 + 12*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[3]**2 + 3*(D - 1)*x[2]*x[4] + 2*(D**2 - 1)*x[6]**2 + 4*(D**2 - 3*D + 2)*x[7]**2 + (D**2 - 1)*x[8]**2 + 2*(D**3 + 2*D**2 - 13*D + 10)*x[7]*x[9] + 2*(D**3 - 7*D + 6)*x[9]**2 + 2*(D**3 - 5*D**2 + 8*D - 4)*x[10]**2 + (3*(D - 1)*x[4] + 3*(D - 1)*x[5] + 5*(D - 1)*x[6] + 2*(D - 1)*x[8] + (D**2 - 3*D + 2)*x[10] + 6*x[2])*x[0]**2 + (3*(D - 1)*x[0]**2 + 3*(D - 1)*x[2] + 2*(D**2 - D)*x[5] + (3*D**2 - 2*D - 1)*x[6] + (D**2 - 1)*x[8] + 2*(D**2 - 3*D + 2)*x[10])*x[1]**2 + 3*x[2]**2 + (3*(D - 1)*x[2] + 2*(D**2 - D)*x[4])*x[5] + (5*(D - 1)*x[2] + (3*D**2 - 2*D - 1)*x[4] + (D**2 - 1)*x[5])*x[6] + (2*(D - 1)*x[2] + (D**2 - 1)*x[4] + (D**2 - 1)*x[5] + 3*(D**2 - 1)*x[6])*x[8] + ((D**2 - 3*D + 2)*x[2] + 2*(D**2 - 3*D + 2)*x[4] + 2*(D**2 - 3*D + 2)*x[5] + (D**3 + 2*D**2 - 13*D + 10)*x[6] + (D**3 - 7*D + 6)*x[8])*x[10])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_7 = 1/2*(4*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[8] + 4*((D**2 - 3*D + 2)*x[7] + 3*(D**2 - 3*D + 2)*x[9])*x[0]**2 + 4*(5*(D**2 - 3*D + 2)*x[7] + 3*(D**2 - 3*D + 2)*x[9])*x[1]**2 + 4*((D**2 - 3*D + 2)*x[2] + 5*(D**2 - 3*D + 2)*x[4] + (D**3 - 7*D + 6)*x[5] + 4*(D**2 - 3*D + 2)*x[6])*x[7] + 4*(3*(D**2 - 3*D + 2)*x[2] + 3*(D**2 - 3*D + 2)*x[4] + (D**3 - 2*D**2 - D + 2)*x[5] + 2*(D**3 - 3*D**2 + 2*D)*x[6] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[8])*x[9] + 4*((5*D**3 - 24*D**2 + 37*D - 18)*x[7] + (3*D**3 - 14*D**2 + 21*D - 10)*x[9])*x[10] + 2*((D**4 - 6*D**3 + 11*D**2 - 6*D)*x[7] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[9])*x[11] + 2*((D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[7] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[9])*x[12] + 2*(8*(D - 2)*x[3]*x[7] + 4*(D**2 - 2*D)*x[3]*x[9] + 4*(2*(D - 2)*x[7] + (D**2 - 2*D)*x[9])*x[0]*x[1] + (2*x[0]*x[1]**3 + 2*(D + 1)*x[3]*x[5] + 4*D*x[3]*x[6] + 6*(D - 1)*x[3]*x[8] + 2*(3*D - 5)*x[3]*x[10] + (D**2 - 3*D)*x[3]*x[11] + (D**2 - 3*D + 2)*x[3]*x[12] + 6*x[3]*x[0]**2 + 6*x[3]*x[1]**2 + 6*x[2]*x[3] + 6*x[3]*x[4] + (2*x[0]**3 + (2*(D + 1)*x[5] + 4*D*x[6] + 6*(D - 1)*x[8] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 6*x[2] + 6*x[4])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*(D - 1)*x[1]**4 + 2*x[0]**4 + 8*D*x[3]*x[0]*x[1] + 4*D*x[3]**2 + 2*D*x[2]*x[4] + 6*(D - 1)*x[4]**2 + 2*(D**2 - 1)*x[5]**2 + 4*(D**2 - D)*x[6]**2 + 16*(D**2 - 3*D + 2)*x[7]**2 + 6*(D**2 - 2*D + 1)*x[8]**2 + 16*(D**2 - 3*D + 2)*x[7]*x[9] + 4*(D**3 - 3*D**2 + 2*D)*x[9]**2 + 2*(3*D**3 - 14*D**2 + 21*D - 10)*x[10]**2 + (2*D*x[4] + 4*(D - 1)*x[5] + 12*(D - 1)*x[6] + 12*(D - 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 12*x[2])*x[0]**2 + (2*D*x[0]**2 + 2*D*x[2] + 12*(D - 1)*x[4] + 2*(D**2 + 3*D - 4)*x[5] + 12*(D - 1)*x[6] + 2*(D**2 - D)*x[8] + 2*(6*D**2 - 17*D + 11)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*x[2]**2 + 2*(2*(D - 1)*x[2] + (D**2 + 3*D - 4)*x[4])*x[5] + 4*(3*(D - 1)*x[2] + 3*(D - 1)*x[4] + (D**2 - 1)*x[5])*x[6] + 2*(6*(D - 1)*x[2] + (D**2 - D)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 6*(D**2 - 2*D + 1)*x[6])*x[8] + 2*((D**2 - 2*D + 1)*x[2] + (6*D**2 - 17*D + 11)*x[4] + (D**3 + D**2 - 9*D + 7)*x[5] + 2*(3*D**2 - 8*D + 5)*x[6] + (D**3 - 3*D**2 + 3*D - 1)*x[8])*x[10] + ((D**2 - 3*D)*x[2] + (D**3 - 4*D**2 + 3*D)*x[4] + (D**3 - 4*D**2 + 3*D)*x[5] + 2*(D**3 - 4*D**2 + 3*D)*x[6] + (D**3 - 4*D**2 + 3*D)*x[8] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] + ((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_8 = 1/2*(2*(D - 1)*x[1]**4 + 2*x[0]**4 + 8*D*x[3]*x[0]*x[1] + 4*D*x[3]**2 + 2*D*x[2]*x[4] + 6*(D - 1)*x[4]**2 + 4*(3*D**2 - 5*D + 2)*x[6]**2 + 8*(D**2 - 3*D + 2)*x[7]**2 + 4*(D**3 + D**2 - 10*D + 8)*x[7]*x[9] + 8*(D**2 - 3*D + 2)*x[9]**2 + 2*(3*D**3 - 14*D**2 + 21*D - 10)*x[10]**2 + (2*D*x[4] + 6*(D - 1)*x[5] + 16*(D - 1)*x[6] + 6*(D - 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 12*x[2])*x[0]**2 + (2*D*x[0]**2 + 2*D*x[2] + 12*(D - 1)*x[4] + 6*(D - 1)*x[5] + 4*(D**2 + D - 2)*x[6] + 6*(D - 1)*x[8] + 2*(6*D**2 - 17*D + 11)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*x[2]**2 + 6*((D - 1)*x[2] + (D - 1)*x[4])*x[5] + 4*(4*(D - 1)*x[2] + (D**2 + D - 2)*x[4] + (2*D**2 - 3*D + 1)*x[5])*x[6] + 2*(3*(D - 1)*x[2] + 3*(D - 1)*x[4] + 2*(D**2 - D)*x[5] + 2*(2*D**2 - 3*D + 1)*x[6])*x[8] + 2*((D**2 - 2*D + 1)*x[2] + (6*D**2 - 17*D + 11)*x[4] + (3*D**2 - 8*D + 5)*x[5] + 2*(D**3 - D**2 - 3*D + 3)*x[6] + (3*D**2 - 8*D + 5)*x[8])*x[10] + ((D**2 - 3*D)*x[2] + (D**3 - 4*D**2 + 3*D)*x[4] + (D**3 - 4*D**2 + 3*D)*x[5] + 2*(D**3 - 4*D**2 + 3*D)*x[6] + (D**3 - 4*D**2 + 3*D)*x[8] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] - ((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12] + 2*(2*x[0]*x[1]**3 + 2*D*x[3]*x[5] + 4*(2*D - 1)*x[3]*x[6] + 2*D*x[3]*x[8] + 2*(3*D - 5)*x[3]*x[10] + (D**2 - 3*D)*x[3]*x[11] - (D**2 - 3*D + 2)*x[3]*x[12] + 6*x[3]*x[0]**2 + 6*x[3]*x[1]**2 + 6*x[2]*x[3] + 6*x[3]*x[4] + (2*x[0]**3 + (2*D*x[5] + 4*(2*D - 1)*x[6] + 2*D*x[8] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 6*x[2] + 6*x[4])*x[0])*x[1] + 2*((D + 2)*x[3]*x[7] + (D + 2)*x[3]*x[9] + ((D + 2)*x[7] + (D + 2)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 2*(2*(D**2 - 1)*x[7]*x[8] + 4*((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + 8*((D - 1)*x[7] + (D - 1)*x[9])*x[1]**2 + 2*(2*(D - 1)*x[2] + 4*(D - 1)*x[4] + (D - 1)*x[5] + 3*(D**2 - D)*x[6])*x[7] + 2*(2*(D - 1)*x[2] + 4*(D - 1)*x[4] + (D**2 - 1)*x[5] + 3*(D**2 - D)*x[6] + (D - 1)*x[8])*x[9] + 2*((4*D**2 - 11*D + 7)*x[7] + (4*D**2 - 11*D + 7)*x[9])*x[10] + ((D**3 - 4*D**2 + 3*D)*x[7] + (D**3 - 4*D**2 + 3*D)*x[9])*x[11] - ((D**3 - 4*D**2 + 5*D - 2)*x[7] + (D**3 - 4*D**2 + 5*D - 2)*x[9])*x[12])*np.sqrt(D - 2))/D**2
    Q2_9 = 1/2*(4*(D**3 - 2*D**2 - D + 2)*x[7]*x[8] + 4*(3*(D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[0]**2 + 4*(3*(D**2 - 3*D + 2)*x[7] + 5*(D**2 - 3*D + 2)*x[9])*x[1]**2 + 4*(3*(D**2 - 3*D + 2)*x[2] + 3*(D**2 - 3*D + 2)*x[4] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 3*D**2 + 2*D)*x[6])*x[7] + 4*((D**2 - 3*D + 2)*x[2] + 5*(D**2 - 3*D + 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 4*(D**2 - 3*D + 2)*x[6] + (D**3 - 7*D + 6)*x[8])*x[9] + 4*((3*D**3 - 14*D**2 + 21*D - 10)*x[7] + (5*D**3 - 24*D**2 + 37*D - 18)*x[9])*x[10] + 2*((D**4 - 6*D**3 + 11*D**2 - 6*D)*x[7] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[9])*x[11] + 2*((D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[7] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[9])*x[12] + 2*(4*(D**2 - 2*D)*x[3]*x[7] + 8*(D - 2)*x[3]*x[9] + 4*((D**2 - 2*D)*x[7] + 2*(D - 2)*x[9])*x[0]*x[1] + (2*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[5] + 4*D*x[3]*x[6] + 2*(D + 1)*x[3]*x[8] + 2*(3*D - 5)*x[3]*x[10] + (D**2 - 3*D)*x[3]*x[11] + (D**2 - 3*D + 2)*x[3]*x[12] + 6*x[3]*x[0]**2 + 6*x[3]*x[1]**2 + 6*x[2]*x[3] + 6*x[3]*x[4] + (2*x[0]**3 + (6*(D - 1)*x[5] + 4*D*x[6] + 2*(D + 1)*x[8] + 2*(3*D - 5)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 6*x[2] + 6*x[4])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*(D - 1)*x[1]**4 + 2*x[0]**4 + 8*D*x[3]*x[0]*x[1] + 4*D*x[3]**2 + 2*D*x[2]*x[4] + 6*(D - 1)*x[4]**2 + 6*(D**2 - 2*D + 1)*x[5]**2 + 4*(D**2 - D)*x[6]**2 + 4*(D**3 - 3*D**2 + 2*D)*x[7]**2 + 2*(D**2 - 1)*x[8]**2 + 16*(D**2 - 3*D + 2)*x[7]*x[9] + 16*(D**2 - 3*D + 2)*x[9]**2 + 2*(3*D**3 - 14*D**2 + 21*D - 10)*x[10]**2 + (2*D*x[4] + 12*(D - 1)*x[5] + 12*(D - 1)*x[6] + 4*(D - 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 12*x[2])*x[0]**2 + (2*D*x[0]**2 + 2*D*x[2] + 12*(D - 1)*x[4] + 2*(D**2 - D)*x[5] + 12*(D - 1)*x[6] + 2*(D**2 + 3*D - 4)*x[8] + 2*(6*D**2 - 17*D + 11)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*x[2]**2 + 2*(6*(D - 1)*x[2] + (D**2 - D)*x[4])*x[5] + 12*((D - 1)*x[2] + (D - 1)*x[4] + (D**2 - 2*D + 1)*x[5])*x[6] + 2*(2*(D - 1)*x[2] + (D**2 + 3*D - 4)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 1)*x[6])*x[8] + 2*((D**2 - 2*D + 1)*x[2] + (6*D**2 - 17*D + 11)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5] + 2*(3*D**2 - 8*D + 5)*x[6] + (D**3 + D**2 - 9*D + 7)*x[8])*x[10] + ((D**2 - 3*D)*x[2] + (D**3 - 4*D**2 + 3*D)*x[4] + (D**3 - 4*D**2 + 3*D)*x[5] + 2*(D**3 - 4*D**2 + 3*D)*x[6] + (D**3 - 4*D**2 + 3*D)*x[8] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] + ((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12])*np.sqrt(D - 2))/(np.sqrt(D - 2)*D**2)
    Q2_10 = 1/2*(2*(D - 1)*x[1]**4 + 2*x[0]**4 + 8*D*x[3]*x[0]*x[1] + 4*D*x[3]**2 + 2*D*x[2]*x[4] + 6*(D - 1)*x[4]**2 + 4*(D**2 + D - 2)*x[6]**2 + 16*(D**2 - 3*D + 2)*x[7]**2 + 4*(D**3 + 5*D**2 - 22*D + 16)*x[7]*x[9] + 16*(D**2 - 3*D + 2)*x[9]**2 + 2*(3*D**3 - 16*D**2 + 27*D - 14)*x[10]**2 + (2*D*x[4] + 6*(D - 1)*x[5] + 8*(D - 1)*x[6] + 6*(D - 1)*x[8] + 2*(D - 1)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 12*x[2])*x[0]**2 + (2*D*x[0]**2 + 2*D*x[2] + 12*(D - 1)*x[4] + 2*(D**2 + D - 3)*x[5] + 4*(3*D - 4)*x[6] + 2*(D**2 + D - 3)*x[8] + 2*(6*D**2 - 18*D + 13)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*x[2]**2 + 2*(3*(D - 1)*x[2] + (D**2 + D - 3)*x[4])*x[5] + 4*(2*(D - 1)*x[2] + (3*D - 4)*x[4] + (D**2 - 1)*x[5])*x[6] + 2*(3*(D - 1)*x[2] + (D**2 + D - 3)*x[4] + 2*(D**2 - D)*x[5] + 2*(D**2 - 1)*x[6])*x[8] + 2*((D - 1)*x[2] + (6*D**2 - 18*D + 13)*x[4] + (3*D**2 - 10*D + 7)*x[5] + 2*(4*D**2 - 13*D + 9)*x[6] + (3*D**2 - 10*D + 7)*x[8])*x[10] + ((D**2 - 3*D)*x[2] + (D**3 - 4*D**2 + 3*D)*x[4] - (D**2 - 3*D)*x[5] - 2*(D**2 - 3*D)*x[6] - (D**2 - 3*D)*x[8] - (D**3 - 5*D**2 + 6*D)*x[10])*x[11] + ((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] - (D**2 - 3*D + 2)*x[5] - 2*(D**2 - 3*D + 2)*x[6] - (D**2 - 3*D + 2)*x[8] - (D**3 - 5*D**2 + 8*D - 4)*x[10])*x[12] + 2*(2*x[0]*x[1]**3 + 4*D*x[3]*x[5] + 4*(D + 1)*x[3]*x[6] + 4*D*x[3]*x[8] + 2*(4*D - 7)*x[3]*x[10] + (D**2 - 3*D)*x[3]*x[11] + (D**2 - 3*D + 2)*x[3]*x[12] + 6*x[3]*x[0]**2 + 6*x[3]*x[1]**2 + 6*x[2]*x[3] + 6*x[3]*x[4] + (2*x[0]**3 + (4*D*x[5] + 4*(D + 1)*x[6] + 4*D*x[8] + 2*(4*D - 7)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12] + 6*x[2] + 6*x[4])*x[0])*x[1] + 2*((D + 4)*x[3]*x[7] + (D + 4)*x[3]*x[9] + ((D + 4)*x[7] + (D + 4)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 2*(2*(D**2 + D - 2)*x[7]*x[8] + 2*((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + 2*((4*D - 5)*x[7] + (4*D - 5)*x[9])*x[1]**2 + 2*((D - 1)*x[2] + (4*D - 5)*x[4] + 2*(D - 1)*x[5] + (D**2 + 5*D - 6)*x[6])*x[7] + 2*((D - 1)*x[2] + (4*D - 5)*x[4] + (D**2 + D - 2)*x[5] + (D**2 + 5*D - 6)*x[6] + 2*(D - 1)*x[8])*x[9] + 2*((5*D**2 - 16*D + 11)*x[7] + (5*D**2 - 16*D + 11)*x[9])*x[10] - ((D**2 - 3*D)*x[7] + (D**2 - 3*D)*x[9])*x[11] - ((D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[12])*np.sqrt(D - 2))/D**2
    Q2_11 = 1/2*(2*(D - 1)*x[1]**4 + 2*x[0]**4 + 8*D*x[3]*x[0]*x[1] + 4*D*x[3]**2 + 2*D*x[2]*x[4] + 6*(D - 1)*x[4]**2 + 2*(D**2 - 1)*x[5]**2 + 4*(D**2 - D)*x[6]**2 + 2*(D**3 + 5*D**2 - 22*D + 16)*x[7]**2 + 2*(D**2 - 1)*x[8]**2 + 32*(D**2 - 3*D + 2)*x[7]*x[9] + 2*(D**3 + 5*D**2 - 22*D + 16)*x[9]**2 + 2*(3*D**3 - 16*D**2 + 27*D - 14)*x[10]**2 + (2*D*x[4] + 4*(D - 1)*x[5] + 12*(D - 1)*x[6] + 4*(D - 1)*x[8] + 2*(D - 1)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 12*x[2])*x[0]**2 + (2*D*x[0]**2 + 2*D*x[2] + 12*(D - 1)*x[4] + 2*(3*D - 4)*x[5] + 4*(D**2 + D - 3)*x[6] + 2*(3*D - 4)*x[8] + 2*(6*D**2 - 18*D + 13)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*x[2]**2 + 2*(2*(D - 1)*x[2] + (3*D - 4)*x[4])*x[5] + 4*(3*(D - 1)*x[2] + (D**2 + D - 3)*x[4] + (D**2 - 1)*x[5])*x[6] + 2*(2*(D - 1)*x[2] + (3*D - 4)*x[4] + 2*(D - 1)*x[5] + 2*(D**2 - 1)*x[6])*x[8] + 2*((D - 1)*x[2] + (6*D**2 - 18*D + 13)*x[4] + (4*D**2 - 13*D + 9)*x[5] + 2*(3*D**2 - 10*D + 7)*x[6] + (4*D**2 - 13*D + 9)*x[8])*x[10] + ((D**2 - 3*D)*x[2] + (D**3 - 4*D**2 + 3*D)*x[4] - (D**2 - 3*D)*x[5] - 2*(D**2 - 3*D)*x[6] - (D**2 - 3*D)*x[8] - (D**3 - 5*D**2 + 6*D)*x[10])*x[11] - ((D**2 - 3*D + 2)*x[2] + (D**3 - 4*D**2 + 5*D - 2)*x[4] - (D**2 - 3*D + 2)*x[5] - 2*(D**2 - 3*D + 2)*x[6] - (D**2 - 3*D + 2)*x[8] - (D**3 - 5*D**2 + 8*D - 4)*x[10])*x[12] + 2*(2*x[0]*x[1]**3 + 2*(D + 1)*x[3]*x[5] + 8*D*x[3]*x[6] + 2*(D + 1)*x[3]*x[8] + 2*(4*D - 7)*x[3]*x[10] + (D**2 - 3*D)*x[3]*x[11] - (D**2 - 3*D + 2)*x[3]*x[12] + 6*x[3]*x[0]**2 + 6*x[3]*x[1]**2 + 6*x[2]*x[3] + 6*x[3]*x[4] + (2*x[0]**3 + (2*(D + 1)*x[5] + 8*D*x[6] + 2*(D + 1)*x[8] + 2*(4*D - 7)*x[10] + (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12] + 6*x[2] + 6*x[4])*x[0])*x[1] + 2*((D + 4)*x[3]*x[7] + (D + 4)*x[3]*x[9] + ((D + 4)*x[7] + (D + 4)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 2*(6*(D - 1)*x[7]*x[8] + 2*((D - 1)*x[7] + (D - 1)*x[9])*x[0]**2 + 2*((4*D - 5)*x[7] + (4*D - 5)*x[9])*x[1]**2 + 2*((D - 1)*x[2] + (4*D - 5)*x[4] + (D**2 + 2*D - 3)*x[5] + (D**2 + 3*D - 4)*x[6])*x[7] + 2*((D - 1)*x[2] + (4*D - 5)*x[4] + 3*(D - 1)*x[5] + (D**2 + 3*D - 4)*x[6] + (D**2 + 2*D - 3)*x[8])*x[9] + 2*((5*D**2 - 16*D + 11)*x[7] + (5*D**2 - 16*D + 11)*x[9])*x[10] - ((D**2 - 3*D)*x[7] + (D**2 - 3*D)*x[9])*x[11] + ((D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[12])*np.sqrt(D - 2))/D**2
    Q2_12 = 1/2*(6*(D**3 - 4*D**2 + 5*D - 2)*x[9]*x[0]**2 + 6*(2*(2*D**3 - 9*D**2 + 13*D - 6)*x[7] + (4*D**3 - 17*D**2 + 23*D - 10)*x[9])*x[1]**2 + 12*((2*D**3 - 9*D**2 + 13*D - 6)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[6])*x[7] + 6*((D**3 - 4*D**2 + 5*D - 2)*x[2] + (4*D**3 - 17*D**2 + 23*D - 10)*x[4] + (D**4 - 3*D**3 + D**2 + 3*D - 2)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[8])*x[9] + 12*((2*D**4 - 13*D**3 + 30*D**2 - 29*D + 10)*x[7] + 2*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[9])*x[10] - 3*(2*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[7] - (D**5 - 8*D**4 + 23*D**3 - 28*D**2 + 12*D)*x[9])*x[11] - 3*(2*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[7] - (D**5 - 8*D**4 + 25*D**3 - 38*D**2 + 28*D - 8)*x[9])*x[12] + (36*(D**2 - 3*D + 2)*x[3]*x[7] + 24*(D**2 - 3*D + 2)*x[3]*x[9] + 12*(3*(D**2 - 3*D + 2)*x[7] + 2*(D**2 - 3*D + 2)*x[9])*x[0]*x[1] + (2*(4*D - 5)*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[0]**2 + 6*(4*D - 5)*x[3]*x[1]**2 + 6*(D - 1)*x[2]*x[3] + 6*(4*D - 5)*x[3]*x[4] + 6*(D**2 - 1)*x[3]*x[5] + 24*(D - 1)*x[3]*x[6] + 6*(D**2 - 2*D + 1)*x[3]*x[8] + 24*(D**2 - 3*D + 2)*x[3]*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[3]*x[11] + 3*(D**3 - 5*D**2 + 8*D - 4)*x[3]*x[12] + (2*(D - 1)*x[0]**3 + 3*(2*(D - 1)*x[2] + 2*(4*D - 5)*x[4] + 2*(D**2 - 1)*x[5] + 8*(D - 1)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 8*(D**2 - 3*D + 2)*x[10] + (D**3 - 5*D**2 + 6*D)*x[11] + (D**3 - 5*D**2 + 8*D - 4)*x[12])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*(D - 1)*x[0]**4 + 2*(D**2 - 3*D + 2)*x[1]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[2]**2 + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 6*(D**2 - 3*D + 2)*x[4]**2 + 12*(D**2 - 2*D + 1)*x[6]**2 + 24*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 6*(D**3 - 3*D**2 + 3*D - 1)*x[8]**2 + 36*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 12*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 6*(D**4 - 7*D**3 + 17*D**2 - 17*D + 6)*x[10]**2 + 3*(4*(D - 1)*x[2] + 2*(D - 1)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + 4*(D**2 - 2*D + 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + 3*(2*(D - 1)*x[0]**2 + 2*(D - 1)*x[2] + 4*(D**2 - 3*D + 2)*x[4] + 2*(D**2 - 3*D + 2)*x[5] + 2*(4*D**2 - 9*D + 5)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 2*(2*D**3 - 10*D**2 + 15*D - 7)*x[10] - (D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*((D**2 - 2*D + 1)*x[2] + (D**2 - 3*D + 2)*x[4])*x[5] + 6*((D**2 - 2*D + 1)*x[2] + (4*D**2 - 9*D + 5)*x[4] + (D**3 - D**2 - D + 1)*x[5])*x[6] + 6*(2*(D**2 - 2*D + 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5] + (D**3 - 3*D**2 + 3*D - 1)*x[6])*x[8] + 6*((D**2 - 2*D + 1)*x[2] + (2*D**3 - 10*D**2 + 15*D - 7)*x[4] + (D**3 - 5*D**2 + 7*D - 3)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 3*D**2 + 3*D - 1)*x[8])*x[10] + 3*((D**3 - 4*D**2 + 3*D)*x[2] - (D**3 - 4*D**2 + 3*D)*x[4] - (D**3 - 4*D**2 + 3*D)*x[5] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[6] + (D**4 - 5*D**3 + 7*D**2 - 3*D)*x[8] - (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] + 3*((D**3 - 4*D**2 + 5*D - 2)*x[2] - (D**3 - 4*D**2 + 5*D - 2)*x[4] - (D**3 - 4*D**2 + 5*D - 2)*x[5] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[6] + (D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[8] - (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12])*np.sqrt(D - 2))/((D**3 - D**2)*np.sqrt(D - 2))
    Q2_13 = 1/2*(2*(D - 1)*x[0]**4 + 2*(D**2 - 3*D + 2)*x[1]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[2]**2 + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 6*(D**2 - 3*D + 2)*x[4]**2 + 2*(D**3 - D**2 - D + 1)*x[5]**2 + 4*(2*D**3 - 5*D**2 + 4*D - 1)*x[6]**2 + 20*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 36*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 16*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 6*(D**4 - 7*D**3 + 17*D**2 - 17*D + 6)*x[10]**2 + (12*(D - 1)*x[2] + 6*(D - 1)*x[4] + 4*(D**2 - 2*D + 1)*x[5] + 14*(D**2 - 2*D + 1)*x[6] + 6*(D**2 - 2*D + 1)*x[8] + 6*(D**2 - 2*D + 1)*x[10] + 3*(D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + (6*(D - 1)*x[0]**2 + 6*(D - 1)*x[2] + 12*(D**2 - 3*D + 2)*x[4] + 2*(5*D**2 - 12*D + 7)*x[5] + 2*(8*D**2 - 19*D + 11)*x[6] + 2*(5*D**2 - 11*D + 6)*x[8] + 6*(2*D**3 - 10*D**2 + 15*D - 7)*x[10] - 3*(D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 2*(2*(D**2 - 2*D + 1)*x[2] + (5*D**2 - 12*D + 7)*x[4])*x[5] + 2*(7*(D**2 - 2*D + 1)*x[2] + (8*D**2 - 19*D + 11)*x[4] + (D**3 - D**2 - D + 1)*x[5])*x[6] + 2*(3*(D**2 - 2*D + 1)*x[2] + (5*D**2 - 11*D + 6)*x[4] + (D**3 - D**2 - D + 1)*x[5] + (5*D**3 - 11*D**2 + 7*D - 1)*x[6])*x[8] + 2*(3*(D**2 - 2*D + 1)*x[2] + 3*(2*D**3 - 10*D**2 + 15*D - 7)*x[4] + (5*D**3 - 21*D**2 + 27*D - 11)*x[5] + 8*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (5*D**3 - 19*D**2 + 23*D - 9)*x[8])*x[10] + (3*(D**3 - 4*D**2 + 3*D)*x[2] - 3*(D**3 - 4*D**2 + 3*D)*x[4] + (D**4 - 7*D**3 + 15*D**2 - 9*D)*x[5] + 3*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[6] + (2*D**4 - 11*D**3 + 18*D**2 - 9*D)*x[8] - 3*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] - ((D**3 - 4*D**2 + 5*D - 2)*x[2] - (D**3 - 4*D**2 + 5*D - 2)*x[4] - (D**4 - 3*D**3 + D**2 + 3*D - 2)*x[5] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[6] + (2*D**4 - 9*D**3 + 14*D**2 - 9*D + 2)*x[8] - (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12] + (2*(4*D - 5)*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[0]**2 + 6*(4*D - 5)*x[3]*x[1]**2 + 6*(D - 1)*x[2]*x[3] + 6*(4*D - 5)*x[3]*x[4] + 2*(D**2 + 4*D - 5)*x[3]*x[5] + 8*(D**2 - 1)*x[3]*x[6] + 2*(D**2 + 2*D - 3)*x[3]*x[8] + 24*(D**2 - 3*D + 2)*x[3]*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[3]*x[11] - (D**3 - 5*D**2 + 8*D - 4)*x[3]*x[12] + (2*(D - 1)*x[0]**3 + (6*(D - 1)*x[2] + 6*(4*D - 5)*x[4] + 2*(D**2 + 4*D - 5)*x[5] + 8*(D**2 - 1)*x[6] + 2*(D**2 + 2*D - 3)*x[8] + 24*(D**2 - 3*D + 2)*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[11] - (D**3 - 5*D**2 + 8*D - 4)*x[12])*x[0])*x[1] + 4*(8*(D - 1)*x[3]*x[7] + 7*(D - 1)*x[3]*x[9] + (8*(D - 1)*x[7] + 7*(D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*(D**3 + 3*D**2 - 9*D + 5)*x[7]*x[8] + 2*((D**2 - 2*D + 1)*x[7] + 2*(D**2 - 2*D + 1)*x[9])*x[0]**2 + 2*((12*D**2 - 29*D + 17)*x[7] + 4*(3*D**2 - 7*D + 4)*x[9])*x[1]**2 + 2*((D**2 - 2*D + 1)*x[2] + (12*D**2 - 29*D + 17)*x[4] + (D**3 + 5*D**2 - 13*D + 7)*x[5] + 8*(D**2 - 2*D + 1)*x[6])*x[7] + 4*((D**2 - 2*D + 1)*x[2] + 2*(3*D**2 - 7*D + 4)*x[4] + 3*(D**2 - 2*D + 1)*x[5] + (2*D**3 - D**2 - 4*D + 3)*x[6] + 2*(D**2 - 2*D + 1)*x[8])*x[9] + 4*(2*(3*D**3 - 13*D**2 + 17*D - 7)*x[7] + (6*D**3 - 25*D**2 + 32*D - 13)*x[9])*x[10] + ((D**4 - 10*D**3 + 27*D**2 - 18*D)*x[7] + 2*(D**4 - 7*D**3 + 15*D**2 - 9*D)*x[9])*x[11] + ((D**4 - 2*D**3 - 3*D**2 + 8*D - 4)*x[7] - 2*(D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[9])*x[12])*np.sqrt(D - 2))/(D**3 - D**2)
    Q2_14 = 1/2*(2*(D - 1)*x[0]**4 + 2*(D**2 - 3*D + 2)*x[1]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[2]**2 + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 6*(D**2 - 3*D + 2)*x[4]**2 + 4*(2*D**3 - 5*D**2 + 4*D - 1)*x[6]**2 + 16*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 2*(D**3 - D**2 - D + 1)*x[8]**2 + 36*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 20*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 6*(D**4 - 7*D**3 + 17*D**2 - 17*D + 6)*x[10]**2 + (12*(D - 1)*x[2] + 6*(D - 1)*x[4] + 6*(D**2 - 2*D + 1)*x[5] + 14*(D**2 - 2*D + 1)*x[6] + 4*(D**2 - 2*D + 1)*x[8] + 6*(D**2 - 2*D + 1)*x[10] + 3*(D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + (6*(D - 1)*x[0]**2 + 6*(D - 1)*x[2] + 12*(D**2 - 3*D + 2)*x[4] + 2*(5*D**2 - 11*D + 6)*x[5] + 2*(8*D**2 - 19*D + 11)*x[6] + 2*(5*D**2 - 12*D + 7)*x[8] + 6*(2*D**3 - 10*D**2 + 15*D - 7)*x[10] - 3*(D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 2*(3*(D**2 - 2*D + 1)*x[2] + (5*D**2 - 11*D + 6)*x[4])*x[5] + 2*(7*(D**2 - 2*D + 1)*x[2] + (8*D**2 - 19*D + 11)*x[4] + (5*D**3 - 11*D**2 + 7*D - 1)*x[5])*x[6] + 2*(2*(D**2 - 2*D + 1)*x[2] + (5*D**2 - 12*D + 7)*x[4] + (D**3 - D**2 - D + 1)*x[5] + (D**3 - D**2 - D + 1)*x[6])*x[8] + 2*(3*(D**2 - 2*D + 1)*x[2] + 3*(2*D**3 - 10*D**2 + 15*D - 7)*x[4] + (5*D**3 - 19*D**2 + 23*D - 9)*x[5] + 8*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (5*D**3 - 21*D**2 + 27*D - 11)*x[8])*x[10] + (3*(D**3 - 4*D**2 + 3*D)*x[2] - 3*(D**3 - 4*D**2 + 3*D)*x[4] + (2*D**4 - 11*D**3 + 18*D**2 - 9*D)*x[5] + 3*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[6] + (D**4 - 7*D**3 + 15*D**2 - 9*D)*x[8] - 3*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] - ((D**3 - 4*D**2 + 5*D - 2)*x[2] - (D**3 - 4*D**2 + 5*D - 2)*x[4] + (2*D**4 - 9*D**3 + 14*D**2 - 9*D + 2)*x[5] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[6] - (D**4 - 3*D**3 + D**2 + 3*D - 2)*x[8] - (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12] + (2*(4*D - 5)*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[0]**2 + 6*(4*D - 5)*x[3]*x[1]**2 + 6*(D - 1)*x[2]*x[3] + 6*(4*D - 5)*x[3]*x[4] + 2*(D**2 + 2*D - 3)*x[3]*x[5] + 8*(D**2 - 1)*x[3]*x[6] + 2*(D**2 + 4*D - 5)*x[3]*x[8] + 24*(D**2 - 3*D + 2)*x[3]*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[3]*x[11] - (D**3 - 5*D**2 + 8*D - 4)*x[3]*x[12] + (2*(D - 1)*x[0]**3 + (6*(D - 1)*x[2] + 6*(4*D - 5)*x[4] + 2*(D**2 + 2*D - 3)*x[5] + 8*(D**2 - 1)*x[6] + 2*(D**2 + 4*D - 5)*x[8] + 24*(D**2 - 3*D + 2)*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[11] - (D**3 - 5*D**2 + 8*D - 4)*x[12])*x[0])*x[1] + 4*(7*(D - 1)*x[3]*x[7] + 8*(D - 1)*x[3]*x[9] + (7*(D - 1)*x[7] + 8*(D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (12*(D**2 - 2*D + 1)*x[7]*x[8] + 2*(2*(D**2 - 2*D + 1)*x[7] + (D**2 - 2*D + 1)*x[9])*x[0]**2 + 2*(4*(3*D**2 - 7*D + 4)*x[7] + (12*D**2 - 29*D + 17)*x[9])*x[1]**2 + 4*((D**2 - 2*D + 1)*x[2] + 2*(3*D**2 - 7*D + 4)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + (2*D**3 - D**2 - 4*D + 3)*x[6])*x[7] + 2*((D**2 - 2*D + 1)*x[2] + (12*D**2 - 29*D + 17)*x[4] + (D**3 + 3*D**2 - 9*D + 5)*x[5] + 8*(D**2 - 2*D + 1)*x[6] + (D**3 + 5*D**2 - 13*D + 7)*x[8])*x[9] + 4*((6*D**3 - 25*D**2 + 32*D - 13)*x[7] + 2*(3*D**3 - 13*D**2 + 17*D - 7)*x[9])*x[10] + (2*(D**4 - 7*D**3 + 15*D**2 - 9*D)*x[7] + (D**4 - 10*D**3 + 27*D**2 - 18*D)*x[9])*x[11] - (2*(D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[7] - (D**4 - 2*D**3 - 3*D**2 + 8*D - 4)*x[9])*x[12])*np.sqrt(D - 2))/(D**3 - D**2)
    Q2_15 = 1/2*(6*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[0]**2 + 6*(D**4 - 3*D**3 + D**2 + 3*D - 2)*x[7]*x[8] + 6*((4*D**3 - 17*D**2 + 23*D - 10)*x[7] + 2*(2*D**3 - 9*D**2 + 13*D - 6)*x[9])*x[1]**2 + 6*((D**3 - 4*D**2 + 5*D - 2)*x[2] + (4*D**3 - 17*D**2 + 23*D - 10)*x[4] + (D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6])*x[7] + 12*((2*D**3 - 9*D**2 + 13*D - 6)*x[4] + 3*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8])*x[9] + 12*(2*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[7] + (2*D**4 - 13*D**3 + 30*D**2 - 29*D + 10)*x[9])*x[10] + 3*((D**5 - 8*D**4 + 23*D**3 - 28*D**2 + 12*D)*x[7] - 2*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[9])*x[11] + 3*((D**5 - 8*D**4 + 25*D**3 - 38*D**2 + 28*D - 8)*x[7] - 2*(D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[9])*x[12] + (24*(D**2 - 3*D + 2)*x[3]*x[7] + 36*(D**2 - 3*D + 2)*x[3]*x[9] + 12*(2*(D**2 - 3*D + 2)*x[7] + 3*(D**2 - 3*D + 2)*x[9])*x[0]*x[1] + (2*(4*D - 5)*x[0]*x[1]**3 + 6*(D - 1)*x[3]*x[0]**2 + 6*(4*D - 5)*x[3]*x[1]**2 + 6*(D - 1)*x[2]*x[3] + 6*(4*D - 5)*x[3]*x[4] + 6*(D**2 - 2*D + 1)*x[3]*x[5] + 24*(D - 1)*x[3]*x[6] + 6*(D**2 - 1)*x[3]*x[8] + 24*(D**2 - 3*D + 2)*x[3]*x[10] + 3*(D**3 - 5*D**2 + 6*D)*x[3]*x[11] + 3*(D**3 - 5*D**2 + 8*D - 4)*x[3]*x[12] + (2*(D - 1)*x[0]**3 + 3*(2*(D - 1)*x[2] + 2*(4*D - 5)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 8*(D - 1)*x[6] + 2*(D**2 - 1)*x[8] + 8*(D**2 - 3*D + 2)*x[10] + (D**3 - 5*D**2 + 6*D)*x[11] + (D**3 - 5*D**2 + 8*D - 4)*x[12])*x[0])*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + (2*(D - 1)*x[0]**4 + 2*(D**2 - 3*D + 2)*x[1]**4 + 24*(D - 1)*x[3]*x[0]*x[1] + 6*(D - 1)*x[2]**2 + 12*(D - 1)*x[3]**2 + 6*(D - 1)*x[2]*x[4] + 6*(D**2 - 3*D + 2)*x[4]**2 + 6*(D**3 - 3*D**2 + 3*D - 1)*x[5]**2 + 12*(D**2 - 2*D + 1)*x[6]**2 + 12*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 36*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 24*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 6*(D**4 - 7*D**3 + 17*D**2 - 17*D + 6)*x[10]**2 + 3*(4*(D - 1)*x[2] + 2*(D - 1)*x[4] + 4*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + 3*(2*(D - 1)*x[0]**2 + 2*(D - 1)*x[2] + 4*(D**2 - 3*D + 2)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(4*D**2 - 9*D + 5)*x[6] + 2*(D**2 - 3*D + 2)*x[8] + 2*(2*D**3 - 10*D**2 + 15*D - 7)*x[10] - (D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[1]**2 + 6*(2*(D**2 - 2*D + 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 6*((D**2 - 2*D + 1)*x[2] + (4*D**2 - 9*D + 5)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5])*x[6] + 6*((D**2 - 2*D + 1)*x[2] + (D**2 - 3*D + 2)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5] + (D**3 - D**2 - D + 1)*x[6])*x[8] + 6*((D**2 - 2*D + 1)*x[2] + (2*D**3 - 10*D**2 + 15*D - 7)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 5*D**2 + 7*D - 3)*x[8])*x[10] + 3*((D**3 - 4*D**2 + 3*D)*x[2] - (D**3 - 4*D**2 + 3*D)*x[4] + (D**4 - 5*D**3 + 7*D**2 - 3*D)*x[5] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[6] - (D**3 - 4*D**2 + 3*D)*x[8] - (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[10])*x[11] + 3*((D**3 - 4*D**2 + 5*D - 2)*x[2] - (D**3 - 4*D**2 + 5*D - 2)*x[4] + (D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[5] + (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[6] - (D**3 - 4*D**2 + 5*D - 2)*x[8] - (D**4 - 6*D**3 + 13*D**2 - 12*D + 4)*x[10])*x[12])*np.sqrt(D - 2))/((D**3 - D**2)*np.sqrt(D - 2))
    Q2_16 = 1/4*(4*(D - 1)*x[0]**4 + 4*(D**2 - 3*D + 3)*x[1]**4 + 96*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[2]**2 + 48*(D - 1)*x[3]**2 + 24*(D - 1)*x[2]*x[4] + 12*(D**2 - 3*D + 3)*x[4]**2 + 12*(D**3 - 3*D**2 + 3*D - 1)*x[5]**2 + 48*(D**2 - 3*D + 2)*x[4]*x[6] + 48*(D**2 - 2*D + 1)*x[6]**2 + 48*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 12*(D**3 - 3*D**2 + 3*D - 1)*x[8]**2 + 96*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 48*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 12*(D**4 - 7*D**3 + 19*D**2 - 21*D + 8)*x[10]**2 + 3*(D**5 - 6*D**4 + 9*D**3)*x[11]**2 + 3*(D**5 - 6*D**4 + 13*D**3 - 12*D**2 + 4*D)*x[12]**2 + 12*(2*(D - 1)*x[2] + 2*(D - 1)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11] + (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + 12*(2*(D - 1)*x[0]**2 + 2*(D - 1)*x[2] + 2*(D**2 - 3*D + 3)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 4*(D**2 - 3*D + 2)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 2*(D**3 - 5*D**2 + 9*D - 5)*x[10] + (D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12])*x[1]**2 + 24*((D**2 - 2*D + 1)*x[2] + (D**2 - 2*D + 1)*x[4])*x[5] + 24*((D**2 - 2*D + 1)*x[2] + (D**2 - 2*D + 1)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5])*x[8] + 24*((D**2 - 2*D + 1)*x[2] + (D**3 - 5*D**2 + 9*D - 5)*x[4] + (D**3 - 3*D**2 + 3*D - 1)*x[5] + 2*(D**3 - 5*D**2 + 7*D - 3)*x[6] + (D**3 - 3*D**2 + 3*D - 1)*x[8])*x[10] + 12*((D**3 - 4*D**2 + 3*D)*x[2] + (D**2 - 3*D)*x[4] + (D**4 - 5*D**3 + 7*D**2 - 3*D)*x[5] - 2*(D**3 - 4*D**2 + 3*D)*x[6] + (D**4 - 5*D**3 + 7*D**2 - 3*D)*x[8] + 2*(D**3 - 4*D**2 + 3*D)*x[10])*x[11] + 6*(2*(D**3 - 4*D**2 + 5*D - 2)*x[2] + 2*(D**2 - 3*D + 2)*x[4] + 2*(D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[5] - 4*(D**3 - 4*D**2 + 5*D - 2)*x[6] + 2*(D**4 - 5*D**3 + 9*D**2 - 7*D + 2)*x[8] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[10] + (D**5 - 6*D**4 + 11*D**3 - 6*D**2)*x[11])*x[12] + 8*(2*(D - 2)*x[0]*x[1]**3 + 6*(D - 2)*x[3]*x[1]**2 + 6*(D - 2)*x[3]*x[4] + 12*(D - 1)*x[3]*x[6] + 6*(D**2 - 4*D + 3)*x[3]*x[10] - 3*(D**2 - 3*D)*x[3]*x[11] - 3*(D**2 - 3*D + 2)*x[3]*x[12] + 3*(2*(D - 2)*x[4] + 4*(D - 1)*x[6] + 2*(D**2 - 4*D + 3)*x[10] - (D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12])*x[0]*x[1] + 12*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 24*(2*((D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[1]**2 + 2*((D**2 - 3*D + 2)*x[4] + 2*(D**2 - 2*D + 1)*x[6])*x[7] + 2*((D**2 - 3*D + 2)*x[4] + 2*(D**2 - 2*D + 1)*x[6])*x[9] + 2*((D**3 - 5*D**2 + 7*D - 3)*x[7] + (D**3 - 5*D**2 + 7*D - 3)*x[9])*x[10] - ((D**3 - 4*D**2 + 3*D)*x[7] + (D**3 - 4*D**2 + 3*D)*x[9])*x[11] - ((D**3 - 4*D**2 + 5*D - 2)*x[7] + (D**3 - 4*D**2 + 5*D - 2)*x[9])*x[12])*np.sqrt(D - 2))/(D**3 - D**2)
    Q2_17 = 1/4*(4*(D - 1)*x[0]**4 + 4*(D**2 - 3*D + 3)*x[1]**4 + 96*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[2]**2 + 48*(D - 1)*x[3]**2 + 24*(D - 1)*x[2]*x[4] + 12*(D**2 - 3*D + 3)*x[4]**2 + 48*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 96*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 48*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 12*(D**4 - 7*D**3 + 19*D**2 - 21*D + 8)*x[10]**2 + 3*(D**5 - 6*D**4 + 9*D**3)*x[11]**2 - 3*(D**5 - 6*D**4 + 13*D**3 - 12*D**2 + 4*D)*x[12]**2 + 12*(2*(D - 1)*x[2] + 2*(D - 1)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8] + 2*(D**2 - 2*D + 1)*x[10] + (D**3 - 4*D**2 + 3*D)*x[11])*x[0]**2 + 12*(2*(D - 1)*x[0]**2 + 2*(D - 1)*x[2] + 2*(D**2 - 3*D + 3)*x[4] + (2*D**2 - 5*D + 3)*x[5] + 2*(2*D**2 - 5*D + 3)*x[6] + (2*D**2 - 5*D + 3)*x[8] + 2*(D**3 - 5*D**2 + 9*D - 5)*x[10] + (D**2 - 3*D)*x[11])*x[1]**2 + 12*((D**2 - 2*D + 1)*x[2] + (2*D**2 - 5*D + 3)*x[4])*x[5] + 24*((D**2 - 2*D + 1)*x[2] + (2*D**2 - 5*D + 3)*x[4] + (D**3 - 2*D**2 + D)*x[5])*x[6] + 12*((D**2 - 2*D + 1)*x[2] + (2*D**2 - 5*D + 3)*x[4] + 2*(D**3 - 2*D**2 + D)*x[6])*x[8] + 24*((D**2 - 2*D + 1)*x[2] + (D**3 - 5*D**2 + 9*D - 5)*x[4] + (D**3 - 4*D**2 + 5*D - 2)*x[5] + 2*(D**3 - 4*D**2 + 5*D - 2)*x[6] + (D**3 - 4*D**2 + 5*D - 2)*x[8])*x[10] + 6*(2*(D**3 - 4*D**2 + 3*D)*x[2] + 2*(D**2 - 3*D)*x[4] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[5] + 2*(D**4 - 6*D**3 + 11*D**2 - 6*D)*x[6] + (D**4 - 6*D**3 + 11*D**2 - 6*D)*x[8] + 4*(D**3 - 4*D**2 + 3*D)*x[10])*x[11] - 6*((D**4 - 4*D**3 + 5*D**2 - 2*D)*x[5] - 2*(D**4 - 4*D**3 + 5*D**2 - 2*D)*x[6] + (D**4 - 4*D**3 + 5*D**2 - 2*D)*x[8])*x[12] + 8*(2*(D - 2)*x[0]*x[1]**3 + 6*(D - 2)*x[3]*x[1]**2 + 6*(D - 2)*x[3]*x[4] + 3*(D - 1)*x[3]*x[5] + 6*(D - 1)*x[3]*x[6] + 3*(D - 1)*x[3]*x[8] + 6*(D**2 - 4*D + 3)*x[3]*x[10] - 3*(D**2 - 3*D)*x[3]*x[11] + 3*(2*(D - 2)*x[4] + (D - 1)*x[5] + 2*(D - 1)*x[6] + (D - 1)*x[8] + 2*(D**2 - 4*D + 3)*x[10] - (D**2 - 3*D)*x[11])*x[0]*x[1] + 12*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 24*((D**2 - 2*D + 1)*x[7]*x[8] + 2*((D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[1]**2 + (2*(D**2 - 3*D + 2)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6])*x[7] + (2*(D**2 - 3*D + 2)*x[4] + (D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + (D**2 - 2*D + 1)*x[8])*x[9] + 2*((D**3 - 5*D**2 + 7*D - 3)*x[7] + (D**3 - 5*D**2 + 7*D - 3)*x[9])*x[10] - ((D**3 - 4*D**2 + 3*D)*x[7] + (D**3 - 4*D**2 + 3*D)*x[9])*x[11])*np.sqrt(D - 2))/(D**3 - D**2)
    Q2_18 = 1/4*(4*(D - 1)*x[0]**4 + 4*(D**2 - 3*D + 3)*x[1]**4 + 96*(D - 1)*x[3]*x[0]*x[1] + 12*(D - 1)*x[2]**2 + 48*(D - 1)*x[3]**2 + 24*(D - 1)*x[2]*x[4] + 12*(D**2 - 3*D + 3)*x[4]**2 + 4*(D**3 - D**2 - D + 1)*x[5]**2 + 16*(2*D**3 - 5*D**2 + 4*D - 1)*x[6]**2 + 48*(D**3 - 4*D**2 + 5*D - 2)*x[7]**2 + 4*(D**3 - D**2 - D + 1)*x[8]**2 + 96*(D**3 - 4*D**2 + 5*D - 2)*x[7]*x[9] + 48*(D**3 - 4*D**2 + 5*D - 2)*x[9]**2 + 12*(D**4 - 7*D**3 + 19*D**2 - 21*D + 8)*x[10]**2 + 3*(D**5 - 6*D**4 + 9*D**3)*x[11]**2 + 3*(D**5 - 6*D**4 + 13*D**3 - 12*D**2 + 4*D)*x[12]**2 + 4*(6*(D - 1)*x[2] + 6*(D - 1)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 8*(D**2 - 2*D + 1)*x[6] + 2*(D**2 - 2*D + 1)*x[8] + 6*(D**2 - 2*D + 1)*x[10] + 3*(D**3 - 4*D**2 + 3*D)*x[11] - (D**3 - 4*D**2 + 5*D - 2)*x[12])*x[0]**2 + 4*(6*(D - 1)*x[0]**2 + 6*(D - 1)*x[2] + 6*(D**2 - 3*D + 3)*x[4] + 2*(3*D**2 - 8*D + 5)*x[5] + 4*(3*D**2 - 7*D + 4)*x[6] + 2*(3*D**2 - 8*D + 5)*x[8] + 6*(D**3 - 5*D**2 + 9*D - 5)*x[10] + 3*(D**2 - 3*D)*x[11] - (D**2 - 3*D + 2)*x[12])*x[1]**2 + 8*((D**2 - 2*D + 1)*x[2] + (3*D**2 - 8*D + 5)*x[4])*x[5] + 16*(2*(D**2 - 2*D + 1)*x[2] + (3*D**2 - 7*D + 4)*x[4])*x[6] + 8*((D**2 - 2*D + 1)*x[2] + (3*D**2 - 8*D + 5)*x[4] + (D**3 - D**2 - D + 1)*x[5])*x[8] + 8*(3*(D**2 - 2*D + 1)*x[2] + 3*(D**3 - 5*D**2 + 9*D - 5)*x[4] + (3*D**3 - 13*D**2 + 17*D - 7)*x[5] + 2*(3*D**3 - 11*D**2 + 13*D - 5)*x[6] + (3*D**3 - 13*D**2 + 17*D - 7)*x[8])*x[10] + 4*(3*(D**3 - 4*D**2 + 3*D)*x[2] + 3*(D**2 - 3*D)*x[4] + (D**4 - 7*D**3 + 15*D**2 - 9*D)*x[5] + 2*(2*D**4 - 11*D**3 + 18*D**2 - 9*D)*x[6] + (D**4 - 7*D**3 + 15*D**2 - 9*D)*x[8] + 6*(D**3 - 4*D**2 + 3*D)*x[10])*x[11] - 2*(2*(D**3 - 4*D**2 + 5*D - 2)*x[2] + 2*(D**2 - 3*D + 2)*x[4] - 2*(D**4 - 3*D**3 + D**2 + 3*D - 2)*x[5] + 4*(2*D**4 - 9*D**3 + 14*D**2 - 9*D + 2)*x[6] - 2*(D**4 - 3*D**3 + D**2 + 3*D - 2)*x[8] + 4*(D**3 - 4*D**2 + 5*D - 2)*x[10] + (D**5 - 6*D**4 + 11*D**3 - 6*D**2)*x[11])*x[12] + 8*(2*(D - 2)*x[0]*x[1]**3 + 6*(D - 2)*x[3]*x[1]**2 + 6*(D - 2)*x[3]*x[4] + 4*(D - 1)*x[3]*x[5] + 4*(D - 1)*x[3]*x[6] + 4*(D - 1)*x[3]*x[8] + 6*(D**2 - 4*D + 3)*x[3]*x[10] - 3*(D**2 - 3*D)*x[3]*x[11] + (D**2 - 3*D + 2)*x[3]*x[12] + (6*(D - 2)*x[4] + 4*(D - 1)*x[5] + 4*(D - 1)*x[6] + 4*(D - 1)*x[8] + 6*(D**2 - 4*D + 3)*x[10] - 3*(D**2 - 3*D)*x[11] + (D**2 - 3*D + 2)*x[12])*x[0]*x[1] + 12*((D - 1)*x[3]*x[7] + (D - 1)*x[3]*x[9] + ((D - 1)*x[7] + (D - 1)*x[9])*x[0]*x[1])*np.sqrt(D - 2))*np.sqrt(D - 1) + 8*(4*(D**2 - 2*D + 1)*x[7]*x[8] + 6*((D**2 - 3*D + 2)*x[7] + (D**2 - 3*D + 2)*x[9])*x[1]**2 + 2*(3*(D**2 - 3*D + 2)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6])*x[7] + 2*(3*(D**2 - 3*D + 2)*x[4] + 2*(D**2 - 2*D + 1)*x[5] + 2*(D**2 - 2*D + 1)*x[6] + 2*(D**2 - 2*D + 1)*x[8])*x[9] + 6*((D**3 - 5*D**2 + 7*D - 3)*x[7] + (D**3 - 5*D**2 + 7*D - 3)*x[9])*x[10] - 3*((D**3 - 4*D**2 + 3*D)*x[7] + (D**3 - 4*D**2 + 3*D)*x[9])*x[11] + ((D**3 - 4*D**2 + 5*D - 2)*x[7] + (D**3 - 4*D**2 + 5*D - 2)*x[9])*x[12])*np.sqrt(D - 2))/(D**3 - D**2)
    # 7-node
    Q7_1 = D**3*x[0]**4 + 6*D**3*x[2]*x[0]**2 + 3*D**3*x[2]**2 + (3*D**3*x[3]*x[0]**2 + 3*D**3*x[2]*x[3] + (D**3*x[0]**3 + 3*D**3*x[2]*x[0])*x[1])*np.sqrt(D - 1)
    Q7_2 = D**3*x[0]**4 + 3*D**3*x[2]**2 + (D**4 - D**3)*x[2]*x[6] + (6*D**3*x[2] + (D**4 - D**3)*x[6])*x[0]**2
    Q7_3 = D**3*x[0]**4 + 3*D**3*x[2]**2 + (D**4 - D**3)*x[2]*x[5] + (6*D**3*x[2] + (D**4 - D**3)*x[5])*x[0]**2
    Q7_4 = D**3*x[0]**4 + 3*D**3*x[2]**2 + (D**4 - D**3)*x[2]*x[8] + (6*D**3*x[2] + (D**4 - D**3)*x[8])*x[0]**2
    # 8-node
    Q8_1 = D**4*x[0]**4 + 6*D**4*x[2]*x[0]**2 + 3*D**4*x[2]**2
    
    #List theoretical invariants
    cubic = [C1_1]+[C2_1,C2_2,C2_3,C2_4,C2_5,C2_6,C2_7,C2_8,C2_9]+[C5_1,C5_2,C5_3,C5_4]+[C6_1]
    quartic = [Q1_1]+[Q2_1,Q2_2,Q2_3,Q2_4,Q2_5,Q2_6,Q2_7,Q2_8,Q2_9,Q2_10,Q2_11,Q2_12,Q2_13,Q2_14,Q2_15,Q2_16,Q2_17,Q2_18]+[Q7_1,Q7_2,Q7_3,Q7_4]+[Q8_1]    
    
    return np.array(cubic+quartic)


############################################################################################################
#Functions for invariant expectation values
def Exp_I1(d, Ew, Ew2):
    return d*Ew

def Exp_I2(d, Ew, Ew2):
    return d**2*Ew
    
def Exp_I3(d, Ew, Ew2):
    return d**2*Ew2 
    
def Exp_I4(d, Ew, Ew2):
    return d*Ew2 + d*(d-1)*Ew**2

def Exp_I5(d, Ew, Ew2):
    return d*Ew2 + d*(d-1)*Ew**2
    
def Exp_I6(d, Ew, Ew2):
    return d*Ew2 + d*(d-1)*Ew**2

def Exp_I7(d, Ew, Ew2):
    return d**2*Ew2 + d**2*(d-1)*Ew**2

def Exp_I8(d, Ew, Ew2):
    return d**2*Ew2 + d**2*(d-1)*Ew**2

def Exp_I9(d, Ew, Ew2):
    return d*Ew2 + d*(d**2-1)*Ew**2

def Exp_I10(d, Ew, Ew2):
    return d**2*Ew2 + d**2*(d**2-1)*Ew**2

def Exp_I11(d, Ew, Ew2):
    return d*Ew2

def Exp_I12(d, Ew, Ew2):
    return d*Ew2 + d*(d-1)*Ew**2

def Exp_I13(d, Ew, Ew2):
    return d*Ew2 + d*(d**2-1)*Ew**2

def Exp_I_full(d, Ew, Ew2):
    return [Exp_I1(d,Ew,Ew2),Exp_I2(d,Ew,Ew2),Exp_I3(d,Ew,Ew2),Exp_I4(d,Ew,Ew2),Exp_I5(d,Ew,Ew2),Exp_I6(d,Ew,Ew2),Exp_I7(d,Ew,Ew2),Exp_I8(d,Ew,Ew2),Exp_I9(d,Ew,Ew2),Exp_I10(d,Ew,Ew2),Exp_I11(d,Ew,Ew2),Exp_I12(d,Ew,Ew2),Exp_I13(d,Ew,Ew2)]


#Functions for invariant standard errors
def SE_I1(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew2) / N)

def SE_I2(d, N, Ew2, Ew4):
    return d*np.sqrt(Ew2 / N)

def SE_I3(d, N, Ew2, Ew4):
    return d*np.sqrt((Ew4 - Ew2**2) / N)

def SE_I4(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d-2)*Ew2**2) / N)

def SE_I5(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d-2)*Ew2**2) / N)

def SE_I6(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d-2)*Ew2**2) / N)

def SE_I7(d, N, Ew2, Ew4):
    return np.sqrt((d**2*Ew4 + d**2*(d-2)*Ew2**2) / N)

def SE_I8(d, N, Ew2, Ew4):
    return np.sqrt((d**2*Ew4 + d**2*(d-2)*Ew2**2) / N)

def SE_I9(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d**2-2)*Ew2**2) / N)

def SE_I10(d, N, Ew2, Ew4):
    return np.sqrt((d**2*Ew4 + d**2*(d**2-2)*Ew2**2) / N)

def SE_I11(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 - d*Ew2**2) / N)

def SE_I12(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d-2)*Ew2**2) / N)

def SE_I13(d, N, Ew2, Ew4):
    return np.sqrt((d*Ew4 + d*(d**2-2)*Ew2**2) / N)

def SE_I_full(d, N, Ew2, Ew4):
    return [SE_I1(d,N,Ew2,Ew4),SE_I2(d,N,Ew2,Ew4),SE_I3(d,N,Ew2,Ew4),SE_I4(d,N,Ew2,Ew4),SE_I5(d,N,Ew2,Ew4),SE_I6(d,N,Ew2,Ew4),SE_I7(d,N,Ew2,Ew4),SE_I8(d,N,Ew2,Ew4),SE_I9(d,N,Ew2,Ew4),SE_I10(d,N,Ew2,Ew4),SE_I11(d,N,Ew2,Ew4),SE_I12(d,N,Ew2,Ew4),SE_I13(d,N,Ew2,Ew4)]


#Functions for model parameter expectation values
def Exp_f1(d, N, Ew, Ew2):
    return float(d*Ew)

def Exp_f2(d, N, Ew, Ew2):
    return 0.

def Exp_f3(d, N, Ew, Ew2):
    return (1-1/N)*Ew2 - (2-1/N)*Ew**2

def Exp_f4(d, N, Ew, Ew2):
    return 0.

def Exp_f5(d, N, Ew, Ew2):
    return (1-1/N)*Ew2 - (1-1/N)*Ew**2

def Exp_f6(d, N, Ew, Ew2):
    return Ew2 - d*Ew**2

def Exp_f7(d, N, Ew, Ew2):
    return 0.

def Exp_f8(d, N, Ew, Ew2):
    return 0.

def Exp_f9(d, N, Ew, Ew2):
    return Ew2 - d*Ew**2

def Exp_f10(d, N, Ew, Ew2):
    return 0.

def Exp_f11(d, N, Ew, Ew2):
    return Ew2 - Ew**2

def Exp_f12(d, N, Ew, Ew2):
    return Ew2 - Ew**2

def Exp_f13(d, N, Ew, Ew2):
    return Ew2 - Ew**2

def Exp_f_full(d, N, Ew, Ew2):
    return [Exp_f1(d,N,Ew,Ew2),Exp_f2(d,N,Ew,Ew2),Exp_f3(d,N,Ew,Ew2),Exp_f4(d,N,Ew,Ew2),Exp_f5(d,N,Ew,Ew2),Exp_f6(d,N,Ew,Ew2),Exp_f7(d,N,Ew,Ew2),Exp_f8(d,N,Ew,Ew2),Exp_f9(d,N,Ew,Ew2),Exp_f10(d,N,Ew,Ew2),Exp_f11(d,N,Ew,Ew2),Exp_f12(d,N,Ew,Ew2),Exp_f13(d,N,Ew,Ew2)]


#Functions for model parameter standard deviations
def SD_f1(d, N, Ew2, Ew4):
    return np.sqrt(Ew2/N)

def SD_f2(d, N, Ew2, Ew4):
    return np.sqrt(((d+1)*Ew2)/((d-1)*N))

def SD_f3(d, N, Ew2, Ew4):
    term1 = (1/d**2) * (1/N + 1/N**3) * Ew4
    term2 = (1/N + 1/N**2 - 2/(N*d**2) - 2/(N**3*d**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f4(d, N, Ew2, Ew4):
    term1 = ((d+1)/(d**2*(d-1))) * (1/N + 1/N**3) * Ew4
    term2 = ((d+1)/(d**2*(d-1))) * ((d**2-2)/N + d**2/N**2 - 2/N**3) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f5(d, N, Ew2, Ew4):
    term1 = ((d**3+4*d+1)/(d**2*(d-1)**2)) * (1/N + 1/N**3) * Ew4
    term2 = (1/(d**2*(d-1)**2)) * ((d**4+4*d**3-d**2-8*d-2)/N + (d**4+4*d**3+d**2)/N**2 - (2*d**3+8*d+2)/N**3) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f6(d, N, Ew2, Ew4):
    term1 = ((d**2+1)/(N*d**2*(d-1)**2)) * Ew4
    term2 = ((d**3-d**2-2)/(N*d**2*(d-1)**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f7(d, N, Ew2, Ew4):
    term1 = ((d+1)/(N*d**2*(d-1)**2)) * Ew4
    term2 = (((d+1)*(d**2-2))/(N*d**2*(d-1)**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f8(d, N, Ew2, Ew4):
    term1 = ((d**3+d**2+2*d+4)/(N*d**2*(d-1)**2*(d-2))) * Ew4
    term2 = ((d**4+d**3+2*d**2-4*d-8)/(N*d**2*(d-1)**2*(d-2))) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f9(d, N, Ew2, Ew4):
    term1 = ((d**2+1)/(N*d**2*(d-1)**2)) * Ew4
    term2 = ((d**3-d**2-2)/(N*d**2*(d-1)**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f10(d, N, Ew2, Ew4):
    term1 = ((d**3+d**2+2*d+4)/(N*d**2*(d-1)**2*(d-2))) * Ew4
    term2 = ((d**4+d**3+2*d**2-4*d-8)/(N*d**2*(d-1)**2*(d-2))) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f11(d, N, Ew2, Ew4):
    term1 = (((d**2-d+4)*(d**3+d**2+6*d+4))/(N*d**2*(d-1)**2*(d-2)**2)) * Ew4
    term2 = ((d**5-9*d**4-4*d**3-12*d**2+40*d+32)/(N*d**2*(d-1)**2*(d-2)**2)) * Ew2**2
    return np.sqrt(term1 - term2)

def SD_f12(d, N, Ew2, Ew4):
    term1 = ((d**5-d**4+d**3+37*d**2-74*d+60)/(N*d*(d-1)**2*(d-2)**2*(d-3)**2)) * Ew4
    term2 = ((8*(5*d**3-17*d**2+24*d-15))/(N*d*(d-1)**2*(d-2)**2*(d-3)**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f13(d, N, Ew2, Ew4):
    term1 = ((d**3+d**2+2*d+4)/(N*d*(d-1)**2*(d-2)**2)) * Ew4
    term2 = ((4*(d+1))/(N*d*(d-1)**2*(d-2)**2)) * Ew2**2
    return np.sqrt(term1 + term2)

def SD_f_full(d, N, Ew2, Ew4):
    return [SD_f1(d,N,Ew2,Ew4),SD_f2(d,N,Ew2,Ew4),SD_f3(d,N,Ew2,Ew4),SD_f4(d,N,Ew2,Ew4),SD_f5(d,N,Ew2,Ew4),SD_f6(d,N,Ew2,Ew4),SD_f7(d,N,Ew2,Ew4),SD_f8(d,N,Ew2,Ew4),SD_f9(d,N,Ew2,Ew4),SD_f10(d,N,Ew2,Ew4),SD_f11(d,N,Ew2,Ew4),SD_f12(d,N,Ew2,Ew4),SD_f13(d,N,Ew2,Ew4)]
    
#Function for computing the PIGMM invariant & parameters means & variations
def Initialisation_Deviation(d=10, N=1000):
    #Define the expectation values of indiviual weights to each power: <w^k> = \int w^4 f_{initialisation}(w) dw
    Ew = 0
    Ew2_gaussian = 1/d
    Ew4_gaussian = 3/d**2
    Ew2_uniform = 1/(3*d)
    Ew4_uniform = 1/(5*d**2)
        
    #Compute the expectations and errors for both initialisations
    inv_exp =   [Exp_I_full(d, Ew, Ew2_gaussian),             Exp_I_full(d, Ew, Ew2_uniform)]
    inv_se =    [SE_I_full(d, N, Ew2_gaussian, Ew4_gaussian), SE_I_full(d, N, Ew2_uniform, Ew4_uniform)]
    param_exp = [Exp_f_full(d, N, Ew, Ew2_gaussian),          Exp_f_full(d, N, Ew, Ew2_uniform)]
    param_sd =  [SD_f_full(d, N, Ew2_gaussian, Ew4_gaussian), SD_f_full(d, N, Ew2_uniform, Ew4_uniform)]   
    
    return (inv_exp, inv_se, param_exp, param_sd)
    

############################################################################################################
#Wasserstein distance functions
def matrix_root(matrix):
    evals, evecs = np.linalg.eig(matrix)
    matrix_root = evecs @ np.diag(np.sqrt(evals)) @ np.transpose(evecs)
    return matrix_root

#Define the Wasserstein distance function
def wasserstein(param_vec1, param_vec2, d=10.):
    #Compute the linear terms
    linear_term = (param_vec1[0]-param_vec2[0])**2 + (param_vec1[1]-param_vec2[1])**2
    #Compute the trace terms
    trace1 = np.trace(param_vec1[2]) + (d-1)*np.trace(param_vec1[3]) + (d*(d-3)/2)*param_vec1[4] + ((d-1)*(d-2)/2)*param_vec1[5]
    trace2 = np.trace(param_vec2[2]) + (d-1)*np.trace(param_vec2[3]) + (d*(d-3)/2)*param_vec2[4] + ((d-1)*(d-2)/2)*param_vec2[5]
    #Compute the required matrix roots
    V0inv1_root = matrix_root(param_vec1[2])
    VHinv1_root = matrix_root(param_vec1[3])
    #Compute the mixed trace term
    mixed_trace_term1 = np.trace(matrix_root(V0inv1_root @ param_vec2[2] @ V0inv1_root))
    mixed_trace_term2 = (d-1)*np.trace(matrix_root(VHinv1_root @ param_vec2[3] @ VHinv1_root)) 
    mixed_trace_term3 = (d*(d-3)/2)*np.sqrt(param_vec1[4])*np.sqrt(param_vec2[4])
    mixed_trace_term4 = ((d-1)*(d-2)/2)*np.sqrt(param_vec1[5])*np.sqrt(param_vec2[5])
    mixed_trace = mixed_trace_term1 + mixed_trace_term2 + mixed_trace_term3 + mixed_trace_term4
    
    return linear_term + trace1 + trace2 - 2 * mixed_trace




  